.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
get-req \-  (request-information)
.SH PURPOSE
Obtain data that describes the input request.

.SH SYNTAX

.RS 4
.EX

get-req \\
    data | errno | error | cookie-count | cookie <cookie index> \\
        | arg-count | arg-value <arg index> | input-count | \\
        | input-value <input index> | input-name <input index> \\
        | header <header> | referring-url | method \\
        | content-type | trace-file | process-id | name \\
    to [ define ] <variable>

.EE
.RE

.SH DESCRIPTION
Variables related to an input request can be obtained with get-req statement and the result stored into <variable>. The following request variables can be obtained (they are strings except where stated otherwise):

.RS 4
\[bu]    
"data" obtains the pointer to \fBglobal-request-data\fP.

.RE

.RS 4
\[bu]    
"errno" obtains the integer value of operating system "errno" tied to a last Vely statement that can return a status code. The "errno" value is saved internally; and restored here. It means that if "errno" changed for whatever reason since such Vely statement, you will still obtain the correct value. See \fBerror-code\fP for an example. Note that errno value is undefined if there is no error, and can be 0 if the error is reported by Vely and not by operating system.

.RE

.RS 4
\[bu]    
"error" returns the error message (a string) that correlates to "errno" value. The result of "error" clause is \fBallocated memory\fP.

.RE

.RS 4
\[bu]    
"cookie-count" returns the number of cookies. This means any cookies received from the client plus any cookies added (with \fBset-cookie\fP) in the application minus any cookies deleted (with \fBdelete-cookie\fP).

.RE

.RS 4
\[bu]    
"cookie" returns the cookie value specified by <cookie index> (a number (0, 1, 2...) up to number of cookies), for instance in the block of C code:

.RS 4
.EX

num i;
get-req cookie-count to define cookie_c
for (i = 0; i < cookie_c; i++) {
    get-req cookie i to define cookie_val
    pf-web "cookie %s\en", cookie_val
    @<br/>
}

.EE
.RE

In this example, we get the number of input parameters, and then print out each name/value pair.

.RE

.RS 4
\[bu]    
"arg-count" is the number of input arguments to your application (passed from a program caller, see \fBvv\fP).

.RE

.RS 4
\[bu]    
"arg-value" is the string value of a single element from the array of input arguments, specified by <arg_index>. This array is indexed from 0 to one less than value obtained by "arg-count". Here is an example of using arg-count and arg-value:

.RS 4
.EX

get-req arg-count to define ac
pf-out "Total args [%lld]", ac
num i;
for (i=0; i<ac; i++) {
    get-req arg-value i to define av
    pf-out "%s\en", av
}

.EE
.RE

This code will display the number of input arguments (as passed to main() function of your program, excluding the first argument which is the name of the program), and then all the arguments. If there are no arguments, then variable 'ac' would be 0. See \fBvv\fP on passing arguments to your application.

.RE

.RS 4
\[bu]    
"input-count" is the number of input parameters (from a \fBrequest\fP). Together with input-name and input-value, this lets you examine all input parameters in a \fBrequest\fP, especially in situations where the parameters are dynamic in nature.

.RE

.RS 4
\[bu]    
"input-name" is the string value of a single element from the array of input parameter names (from a \fBrequest\fP), specified by <input_index>. This array is indexed from 0 to one less than value obtained by "input-count". See "input-value" for an example.

.RE

.RS 4
\[bu]    
"input-value" is the string value of a single element from the array of input parameter values (from a \fBrequest\fP), specified by <input_index>. This array is indexed from 0 to one less than value obtained by "input-count". For example:

.RS 4
.EX

num i;
get-req input-count to define input_c
for (i = 0; i < input_c; i++) {
    get-req input-name i to define input_n
    get-req input-value i to define input_v
    pf-web "Input parameter #%lld, name is %s, value is %s\en", i, input_n, input_v
    @<br/>
}

.EE
.RE

In this example, we get the number of cookies, and then print out each. The cookie value is the full cookie string, including expiration date, strictness etc.

.RE

.RS 4
\[bu]    
"header" is the value of HTTP request header <header> that is set by the client. For example, if the HTTP request contains header "My-Header:30", then hval would be "30":

.RS 4
.EX

get-req header "My-Header" to define hval

.EE
.RE

Note that not all HTTP request headers are set by the caller. For example, SERVER_NAME or QUERY_STRING are set by the web server, and to get such headers, use \fBget-sys\fP.

.RE

.RS 4
\[bu]    
"method" is the request method. This is a number with values of VV_GET, VV_POST, VV_PUT, VV_PATCH or VV_DELETE for GET, POST, PUT, PATCH or DELETE requests, respectively. If it is not any of those commonly used ones, then the value is VV_OTHER and you can use \fBget-sys\fP with "web-environment" clause to obtain "REQUEST_METHOD" variable.

If you are writing a REST API, then you can use the method to implement Create, Read, Update, Delete (CRUD) operations, for instance:

.RS 4
.EX

get-req method to define request_method
if (request_method == VV_POST) {
    // create resource action
}
if (request_method == VV_GET) {
    // read resource action
}
if (request_method == VV_PUT) {
    // replace resource action
}
if (request_method == VV_PATCH) {
    // update resource action
}
if (request_method == VV_DELETE) {
    // delete resource action
}

.EE
.RE


.RE

.RS 4
\[bu]    
"content-type" is the request content type. It is a string and generally denotes the content type of a \fBrequest-body\fP, if included in the request. Common examples are "application/x-www-form-urlencoded", "multipart/form-data" or "application/json".

.RE

.RS 4
\[bu]    
"referring-url" is the referring URL (i.e. the page from which this request was called, for example by clicking a link). 

.RE

.RS 4
\[bu]    
"trace-file" is the full path of the trace file for this request (if enabled, see \fBvv\fP).

.RE

.RS 4
\[bu]    
"process-id" is the "PID" (process ID) number of the currently executing process, as an integer.

.RE

.RS 4
\[bu]    
"name" is the request name as specified in the \fBrequest-URL\fP.
.RE

Note that all the string values above (except "data") should be treated as constants - do not change them as that may cause program to malfunction. If you want to alter any of these values, make a copy first (see \fBcopy-string\fP).

.SH EXAMPLES
Get the name of current trace file:

.RS 4
.EX

get-req trace-file to define trace_file

.EE
.RE

.SH SEE ALSO
 
.B - Request information

\fBget-req\fP  
\fBif-task\fP  
\fBinput-param\fP  
\fBrequest-body\fP  
\fBset-input\fP  
\fBset-req\fP  
\fBtask-param\fP    
See all 
\fBdocumentation\fP
