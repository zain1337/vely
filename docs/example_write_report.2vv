.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
example_write_report \- Vely documentation (examples)
.SH DESCRIPTION
Report from SQL database, file writing
Builds a report of employees from a database. Creates a "reports" directory and a file name with a time stamp, then writes the report to a file and also displays the report to a web page.

In a nutshell: MariaDB; command line; web browser; Nginx; Unix sockets; 2 source files, 69 lines of code.

To get started right away with step-by-step instructions on how to run this example, go to "Setup prerequisites" chapter further down.

.LP
.B SCREENSHOTS OF APPLICATION
.LP

Database report is saved into a file (the path to which is displayed) and the report itself is shown in the web page:
(Image write_report.png not available in man page, see web page documentation)

.LP
.B SOURCE FILES
.LP

The following are the source files in this project:

.B - Database setup (setup.sql)

For this example, table "employees" is created if it doesn't exist (all its data deleted if it does), and it is populated with some data:

.RS 4
.EX

create table if not exists employees (name varchar(50), salary int);
delete from employees;
insert into employees (name, salary) values ('Mike', 50000), ('Joan', 60000), ('Kelly', 70000);

.EE
.RE


.B - Database report (write_report.vely)

A result set of a query is stored in a string using \fBwrite-string\fP with \fBrun-query\fP within in. \fBwrite-string\fP simply redirects any output (that would normally go to the client) into a string. This output is then written to a file using \fBwrite-file\fP and also sent back to the client.

A few other things are demonstrated here, such as \fBget-req\fP to obtain the database vendor (i.e. which database is used, as any number of databases can be, such as MariaDB/MySQL, PostgreSQL, SQLite). Also getting current time (\fBget-time\fP) is shown to produce a timestamp for the file name, and \fBmatch-regex\fP to replace spaces with underscores.

.RS 4
.EX


\[char35]include "vely.h" 

void write_report()
{

    out-header default

    get-app db-vendor db_write_report to define dbv
    @Database vendor used is <<p-out dbv>><br/>

    // Build report for a query and store it into variable outmsg

    write-string define outmsg
    @Employee report<hr/>        

    // Get data from the database
    run-query @db_write_report="select name, salary from employees order by name" output name, salary
       @  -----<br/>
       @  Name: <<query-result name>> 
       @  Salary: <<query-result salary>><br/>
    end-query
    @-----<br/>

    @End report.

    end-write-string


    // build time stamp for report file
    get-time to define curr_time format "%A %B %d %Y %l %M %p %Z"
    get-req process-id to define pid
    match-regex " " in curr_time replace-with "_" result define tstamp

    // get application home directory and build the path for reports directory
    get-app directory to define home_dir
    write-string define report_dir
    @<<p-out home_dir>>/reports
    end-write-string

    // make directory, ignore error if it exists
    exec-program "mkdir" args "-p", report_dir status define st
    if (st != VV_OKAY  && st != VV_ERR_EXIST) {
        @Error in creating reports directory
        exit-request
    }

    // build the name of report file
    write-string define report_file
    @<<p-out home_dir>>/reports/report_<<pf-out "%lld", pid>><<p-out tstamp>>
    end-write-string

    // write report file

    write-file report_file from outmsg status st
    if (st<0) {
        @Error in writing report file <<p-out report_file>> (<<pf-out "%lld", st>>)
        exit-request
    } else {
        // if okay, display report file to the web
        @Report file [<<p-out report_file>>] written.<br/>
        @Report file content:<br/>
        p-out outmsg
    }

}


.EE
.RE


.LP
.B SETUP PREREQUISITES
.LP

\fBInstall Vely\fP - you can use standard packaging tools such as \fBapt\fP, \fBdnf\fP, \fBpacman\fP or \fBzypper\fP.

Because they are used in this example, you will need to install \fBNginx\fP as a web server and \fBMariaDB\fP as a database.

After installing Vely, turn on syntax highlighting in vim if you're using it:

.RS 4
.EX

vv -m

.EE
.RE


.LP
.B GET THE SOURCE CODE
.LP

The source code is a part of Vely installation. It is a good idea to create a separate source code directory for each application (and you can name it whatever you like). In this case, unpacking the source code will do that for you:

.RS 4
.EX

tar xvf $(vv -o)/examples/write_report.tar.gz
cd write_report

.EE
.RE

.LP
.B SETUP APPLICATION
.LP

The very first step is to create an application. The application will be named "write_report", but you can name it anything (if you do that, change it everywhere). It's simple to do with \fBvf\fP:

.RS 4
.EX

sudo vf -i -u $(whoami) write_report

.EE
.RE

This will create a new application home (which is "/var/lib/vv/write_report") and do the application setup for you. Mostly that means create various subdirectories in the home folder, and assign them privileges. In this case only current user (or the result of "whoami" Linux command) will own those directories with 0700 privileges; it means a secure setup.

.LP
.B SETUP THE DATABASE
.LP

Before any coding, you need some place to store the information used by the application. First, you will create MariaDB database "db_write_report" owned by user "vely" with password "your_password". You can change any of these names, but remember to change them everywhere here. And then, you will create database objects in the database.

Execute the following logged in as root in \fBmysql utility\fP:

.RS 4
.EX

--Create velydb database hosting application data (if it doesn't exist):
create database if not exists db_write_report;
create user if not exists vely identified by 'your_password';
grant create,alter,drop,select,insert,delete,update on db_write_report.* to vely;
-- Create database objects needed for the application (eg. tables, indexes):
use db_write_report;
source setup.sql;
exit

.EE
.RE


.LP
.B CONNECT VELY TO A DATABASE
.LP

In order to let Vely know where your database is and how to log into it, you will create \fBdatabase_config_file\fP named "db_write_report". This name doesn't have to be "db_write_report", rather it can be anything - this is the name used in actual database statements in source code (like \fBrun-query\fP), so if you change it, make sure you change it everywhere. Create it:

.RS 4
.EX

echo '[client]
user=vely
password=your_password
database=db_write_report
protocol=TCP
host=127.0.0.1
port=3306' > db_write_report

.EE
.RE

The above is a \fBstandard mariadb client options file\fP. Vely uses native MariaDB database connectivity, so you can specify any options that a given database lets you.

.LP
.B BUILD APPLICATION
.LP

Use \fBvv\fP utility to make the application:

.RS 4
.EX

vv -q --db=mariadb:db_write_report 

.EE
.RE

Note usage of --db option to specify MariaDB database and the database configuration file name.

.LP
.B START YOUR APPLICATION SERVER
.LP

To start the application server for your web application use \fBvf\fP FastCGI process manager. The application server will use a Unix socket to communicate with the web server (i.e. a reverse-proxy):

.RS 4
.EX

vf -w 3 write_report

.EE
.RE

This will start 3 daemon processes to serve the incoming requests. You can also start an adaptive server that will increase the number of processes to serve more requests, and gradually reduce the number of processes when they're not needed:

.RS 4
.EX

vf write_report

.EE
.RE

See \fBvf\fP for more options to help you achieve best performance.

If you want to stop your application server:

.RS 4
.EX

vf -m quit write_report

.EE
.RE


.LP
.B SETUP WEB SERVER
.LP

This shows how to connect your application listening on a Unix socket (started with \fBvf\fP) to Nginx web server.


.B - Step 1
:
You will need to edit the Nginx configuration file. For Ubuntu and similar:

.RS 4
.EX

sudo vi /etc/nginx/sites-enabled/default

.EE
.RE

while on Fedora and other systems it might be at:

.RS 4
.EX

sudo vi /etc/nginx/nginx.conf

.EE
.RE


Add the following in the "server {}" section ("/write_report" is the application path (see \fBrequest_URL\fP) and "write_report" is your application name):

.RS 4
.EX

location /write_report { include /etc/nginx/fastcgi_params; fastcgi_pass  unix:///var/lib/vv/write_report/sock/sock; }

.EE
.RE


.B - Step 2
:
Finally, restart Nginx:

.RS 4
.EX

sudo systemctl restart nginx

.EE
.RE

Note: you must not have any other URL resource that starts with "/write_report" (such as for example "/write_report.html" or "/write_report_something" etc.) as the web server will attempt to pass them as a reverse proxy request, and they will likely not work. If you need to, you can change the application path to be different from "/write_report", see \fBrequest_URL\fP.

.LP
.B ACCESS APPLICATION SERVER FROM THE BROWSER
.LP

Use the following URL(s) to access your application server from a client like browser (see \fBrequest_URL\fP). Use actual IP or web address instead of 127.0.0.1 if different.

.RS 4
.EX

\[char35] Run report 
http://127.0.0.1/write_report/write_report

.EE
.RE

Note: if your server is on the Internet and it has a firewall, you may need to allow HTTP traffic - see \fBufw\fP, \fBfirewall-cmd\fP etc.

.LP
.B ACCESS APPLICATION SERVER FROM COMMAND LINE
.LP

To access your application server from command line (instead through web browser/web server), use "cgi-fcgi" to see the application response:

.RS 4
.EX

\[char35]Run report 
export REQUEST_METHOD=GET
export SCRIPT_NAME='/write_report'
export PATH_INFO='/write_report'
export QUERY_STRING=''
cgi-fcgi -connect /var/lib/vv/write_report/sock/sock /

.EE
.RE

Note: to suppress output of HTTP headers, add this before running "cgi-fcgi":

.RS 4
.EX

export VV_SILENT_HEADER=yes

.EE
.RE

If you need to, you can also run your application as a \fBCGI\fP program. 

.LP
.B RUN PROGRAM FROM COMMAND LINE
.LP

Execute the following to run your application from command line (as a command-line utility):

.RS 4
.EX

\[char35]Run report 
export REQUEST_METHOD=GET
export SCRIPT_NAME='/write_report'
export PATH_INFO='/write_report'
export QUERY_STRING=''
/var/lib/vv/bld/write_report/write_report

.EE
.RE

Note: to suppress output of HTTP headers, add this before running /var/lib/vv/bld/write_report/write_report program:

.RS 4
.EX

export VV_SILENT_HEADER=yes

.EE
.RE

Note: if running your program as a command-line utility is all you want, you don't need to run an application server.
.SH SEE ALSO
 
.B - Examples

\fBexample_client_API\fP  
\fBexample_cookies\fP  
\fBexample_create_table\fP  
\fBexample_distributed_servers\fP  
\fBexample_docker\fP  
\fBexample_encryption\fP  
\fBexample_file_manager\fP  
\fBexample_form\fP  
\fBexample_hash_server\fP  
\fBexample_hello_world\fP  
\fBexample_json\fP  
\fBexample_multitenant_SaaS\fP  
\fBexample_postgres_transactions\fP  
\fBexamples\fP  
\fBexample_sendmail\fP  
\fBexample_shopping\fP  
\fBexample_stock\fP  
\fBexample_uploading_files\fP  
\fBexample_using_mariadb_mysql\fP  
\fBexample_utility\fP  
\fBexample_write_report\fP    
See all 
\fBdocumentation\fP
