.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
encode-hex \-  (hex-encoding)
.SH PURPOSE
Encode data into hexadecimal string.

.SH SYNTAX

.RS 4
.EX

encode-hex <data> to [ define ] <output> \\
    [ input-length <input length> ] \\
    [ output-length [ define ] <output length> ] \\
    [ prefix <prefix> ]

.EE
.RE

.SH DESCRIPTION
encode-hex will encode string <data> to hexadecimal string <output> given in "to" clause, which is null-terminated and consists of digits "0"-"9" and letters "a"-"f". <output> is \fBallocated memory\fP.

<data> can contain null-bytes and in general is any binary data, the length of which is given by <input length> in "input-length" clause. The output string <output> is allocated and its length is given in <output length> in "output-length" clause. If you wish to prefix the output with a null-terminated string <prefix>, you can specify it in "prefix" clause.

"output-length" clause is optional, and so is "prefix" (in which case no prefix is prepended). "input-length" clause is also optional, and if not specified, <input length> is taken as the string length of <data>, which is in that case assumed to be null-terminated.

Optional "define" subclause can be used to create <output> string and a number variable <output length> if they do not already exist.

.SH EXAMPLES
Create hexadecimal string from binary data "mydata" of length 7, prefixed with string "\\\\ex" (which is typically needed for PostgreSQL binary input to queries). The output string "hexout" is created and so is its length "olen" variable of type "num":

.RS 4
.EX

char *mydata = "\ex00""A""\ex00""\exF""AB""\ex00""\ex04";
encode-hex mydata to define hexout input-length 7 output-length define olen prefix "\\\\ex"

.EE
.RE

The value of "hexout" will be:

.RS 4
.EX

\\ex0041000F414200

.EE
.RE

.SH SEE ALSO
 
.B - Hex encoding

\fBdecode-hex\fP  
\fBencode-hex\fP    
See all 
\fBdocumentation\fP
