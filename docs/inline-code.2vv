.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
inline-code \-  (language)
.SH PURPOSE
Inline Vely code in string statements.

.SH SYNTAX

.RS 4
.EX

<<vely code>>

.EE
.RE

.SH DESCRIPTION
You can write Vely code within other Vely statements that build strings, whether for output (\fBoutput-statement\fP) or to build other strings (\fBwrite-string\fP), by using << and >> delimiters. There is no need for white space between the delimiters and Vely code, i.e. you could either write 

.RS 4
.EX

<<p-web my_string>>

.EE
.RE

or 

.RS 4
.EX

<<  p-web my_string  >> 

.EE
.RE

to the same effect.

.SH EXAMPLES
\fBquery-result\fP statement displays the result of a query, and in the following code it's used to display results on the same line as other output (i.e. as inline):

.RS 4
.EX

run-query 
   @<tr>
   @    <td>
   @        First name is << query-result  firstName >>
   @    </td>
   @    <td>
   @        Last name is << query-result# employees, lastName >>
   @    </td>
   @</tr>
end-query

.EE
.RE

In the code below, "some_function()" is a C function that uses Vely code to output some text, and it's used inline to output "Hello world":

.RS 4
.EX

@Hello <<.some_function();>> 

.EE
.RE

(note the usage of \fBdot\fP statement to use any C expression, and finishing with semi-colon as a C statement). Function "some_function()" would simply output "world":

.RS 4
.EX

void some_function()
{
    @world 
}

.EE
.RE

A \fBwrite-string\fP can be built with other Vely statements inlined, in this case we print the value of another string, resulting in "There is 42 minutes left!":

.RS 4
.EX

char * mins="42";
(( define my_string
There is <<p-out mins>> minutes left!
))

.EE
.RE

.SH SEE ALSO
 
.B - Language

\fBdot\fP  
\fBinline-code\fP  
\fBstatement-APIs\fP  
\fBsyntax-highlighting\fP  
\fBunused-var\fP    
See all 
\fBdocumentation\fP
