.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
on-error \-  (database
error_handling)
.SH PURPOSE
Either exit request or continue processing when there is an error in executing a query.

.SH SYNTAX

.RS 4
.EX

on-error ( exit | continue ) [ @<database> ]

.EE
.RE

.SH DESCRIPTION
When a database statement (like \fBrun-query\fP) fails, either exit request processing if "exit" is used, or continue if "continue" is used. "Exiting" is equivalent to calling \fBreport-error\fP with the message containing details about the error. "Continuing" means that your program will continue but you should examine error code (see "error" clause in \fBrun-query\fP) and handle any issues.

The default action is "exit". You can switch back and forth between "exit" and "continue". Typically, "exit" is preferable because errors in database SQL code generally mean application issues, i.e. bugs that need fixing, however "continue" may be used when application wants to attempt to recover from errors or perform other actions.

Note that you can override the effect of on-error for a specific query by using "on-error-continue" and "on-error-exit" clauses in \fBrun-query\fP. 

.LP
.B DATABASE
.LP

Optional <database> is specified in "@" clause and is the name of the \fBdatabase_config_file\fP. 

.SH EXAMPLES
The following will not exit when errors happen but rather continue execution (and you must check every error henceforth):

.RS 4
.EX

on-error continue @mydb

.EE
.RE

.SH SEE ALSO
 
.B - Database

\fBbegin-transaction\fP  
\fBcommit-transaction\fP  
\fBcurrent-row\fP  
\fBdatabase_config_file\fP  
\fBdatabase_queries\fP  
\fBdelete-query\fP  
\fBon-error\fP  
\fBprepared_statements\fP  
\fBquery-result\fP  
\fBrollback-transaction\fP  
\fBrun-query\fP    
.B - Error handling

\fBerror_code\fP  
\fBerror_handling\fP  
\fBon-error\fP  
\fBreport-error\fP    
See all 
\fBdocumentation\fP
