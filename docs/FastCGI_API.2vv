.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
FastCGI_API \- Vely documentation (Client)
.SH DESCRIPTION
You can use Vely C API client library to connect to \fBFastCGI\fP application servers, including Vely:

.RS 4
\[bu]    
The API has only a few functions, and the main one is "vv_fc_request()", which makes a call to the server.

.RE

.RS 4
\[bu]    
There is only a single data type used, which is "vv_fc" and it is used to specify a request and its options, as well as to retrieve results.

.RE

.RS 4
\[bu]    
There is a single include file ("vfcgi.h"). 

.RE

.RS 4
\[bu]    
When building your client executable, you can specify build flags by using the result of "vv -i".

.RE

.RS 4
\[bu]    
It is MT-safe, so you can use it in multi-threaded applications, such as to make many requests in parallel.
.RE

See Examples section below for detailed examples.

.LP
.B SENDING A REQUEST TO FASTCGI SERVER
.LP

The following function is used to make a FastCGI call using C API:

.RS 4
.EX

int vv_fc_request (vv_fc *req);

.EE
.RE

All input and output is contained in a single variable of type "vv_fc", the pointer to which is passed to "vv_fc_request()" function that sends a request to the server. A variable of type "vv_fc" must be initialized to zero before using it (such as with {0} initialization, "memset()" or "calloc()"), or otherwise some of its members may have random values:

.RS 4
.EX

// Define and initialize request variable
vv_fc req = {0};
// You could also do:
// memset ((char*)&req, 0, sizeof(vv_fc));
\[char46]..
// Set members of 'req' variable (see below)
\[char46]..
// Make FastCGI call
int result = vv_fc_request (&req);

.EE
.RE

Type "vv_fc" is defined as (i.e. public members of it):

.RS 4
.EX

typedef struct {
    const char *fcgi_server; // the IP:port/socket_path to server
    const char *req_method; // request method
    const char *app_path; // application path
    const char *req; // request name
    const char *url_payload; // URL payload (path+query string)
    const char *content_type; // content type
    int content_len; // content len
    const char *req_body; // request body (i.e. content)
    char **env; // environment to pass into request on server side
    int timeout; // timeout for request
    int req_status; // status of request from server
    int data_len; // length of response from server
    int error_len; // length of error from server
    char *errm; // error message when vv_fc_request returns other than VV_OKAY
    vv_fc_out_hook out_hook; // hook to get data output as soon as it arrives
    vv_fc_err_hook err_hook; // hook get error output as soon as it arrives
    vv_fc_done_hook done_hook; // get all data when request is complete
    int thread_id; // custom ID when executing in a multithreaded fashion
    volatile char done; // indicator that the request has completed
    int return_code; // the return code from vv_fc_request()
} vv_fc;

.EE
.RE



.B - Mandatory input

The following members of "vv_fc" type must be supplied in order to make a FastCGI call:

.RS 4
\[bu]    
"fcgi_server" represents either a Unix socket or a TCP socket, and is:

.RS 4
\[bu]    
for a Unix socket, a fully qualified name to a Unix socket file used to communicate with the server (for a Vely server, it's "/var/lib/vv/<app name>/sock/sock", where <app name> is the application name), or

.RE

.RS 4
\[bu]    
for a TCP socket, a host name and port name in the form of "<host name>:<port number>", specifying where is the server listening on (for instance "127.0.0.1:2301" if the FastCGI server is local and runs on TCP port 2301).
.RE


.RE

.RS 4
\[bu]    
"req_method" is a request method, such as "GET", "POST", "PUT", "DELETE" or any other.

.RE

.RS 4
\[bu]    
"app_path" is an application path (see \fBrequest_URL\fP). By default it's "/<application name>". 

.RE

.RS 4
\[bu]    
"req" is a request path, i.e. a request name preceded by a forward slash, as in "/<request name>" (see \fBrequest_URL\fP).
.RE


.B - Request URL payload

"url_payload" is the URL payload, meaning input parameters (as path segments and query string, see \fBrequest_URL\fP). URL payload can be NULL or empty, in which case it is not used.


.B - Request body (content)

"req_body" is the request body, which can be any text or binary data. "content_type" is the content type of request body (for instance "application/json" or "image/jpg"). "content_len" is the length of request body in bytes. A request body is sent only if "content_type" and "req_body" are not NULL and not empty, and if "content_len" is greater than zero.


.B - Passing environment to server

"env" is any environment variables that should be passed along to the request executing on a server. You can access those in Vely via "web-environment" clause of \fBget-sys\fP statement. This is an array of strings, where name/value pairs are specified one after the other, and which always must end with NULL. For example, if you want to use variable "REMOTE_USER" with value "John" and variable "MY_VARIABLE" with value "8000", then it might look like this:

.RS 4
.EX

char *env[5];
env[0] = "REMOTE_USER";
env[1] = "John"
env[2] = "MY_VARIABLE";
env[3] = "8000"
env[4] = NULL;

.EE
.RE

Thus, if you are passing N environment variables to the server, you must size "env" as "char*" array with 2*N+1 elements.


.B - Timeout

"timeout" is the number of seconds a call to the server should not exceed. For instance if the remote server is taking too long or if the network connection is too slow, you can limit how long to wait for a reply. If there is no timeout, then "timeout" value should be zero. Note that DNS resolution of the host name (in case you are using a TCP socket) is not counted in timeout. Maximum value for timeout is 86400.

Even if timeout is set to 0, a server call may eventually timeout due to underlying socket and network settings. Note that even if your server call times out, the actual request executing on the server may continue until it's done.

.B - Thread ID

"thread_id" is an integer that you can set and use when your program is multithreaded. By default it's 0. This number is set by you and passed to hooks (your functions called when request is complete or data available). You can use this number to differentiate the data with regards to which thread it belongs to.


.B - Completion indicator and return code

When your program is multithreaded, it may be useful to know when (and if) a request has completed. "done" is set to to "true" when a request completes, and "return_code" is the return value from vv_fc_request(). In a single-threaded program, this information is self-evident, but if you are running more than one request at the same time (in different threads), you can use these to check on each request executing in parallel (for instance in a loop in the main thread).

Note that "done" is "true" specifically when all the results of a request are available and the request is about to be completed. In a multithreaded program, it means the thread is very soon to terminate or has already terminated; it does not mean that thread has positively terminated. Use standard "pthread_join()" function to make sure the thread has terminated if that is important to you. 

.LP
.B RETURN VALUE
.LP

The following are possible return values from "vv_fc_request()" (available in "return_code" member of "vv_fc" type):

.RS 4
\[bu]    
VV_OKAY if request succeeded,

.RE

.RS 4
\[bu]    
VV_FC_ERR_RESOLVE_ADDR if host name for TCP connection cannot be resolved,

.RE

.RS 4
\[bu]    
VV_FC_ERR_PATH_TOO_LONG if path name of Unix socket is too long,

.RE

.RS 4
\[bu]    
VV_FC_ERR_SOCKET if cannot create a socket (for instance they are exhausted for the process or system),

.RE

.RS 4
\[bu]    
VV_FC_ERR_CONNECT if cannot connect to server (TCP or Unix alike),

.RE

.RS 4
\[bu]    
VV_FC_ERR_SOCK_WRITE if cannot write data to server (for instance if server has encountered an error or is down, or if network connection is no longer available),

.RE

.RS 4
\[bu]    
VV_FC_ERR_SOCK_READ if cannot read data from server (for instance if server has encountered an error or is down, or if network connection is no longer available),

.RE

.RS 4
\[bu]    
VV_FC_ERR_PROT_ERR if there is a protocol error, which indicates a protocol issue on either or both sides,

.RE

.RS 4
\[bu]    
VV_FC_ERR_BAD_VER if either side does not support protocol used by the other,

.RE

.RS 4
\[bu]    
VV_FC_ERR_SRV if server cannot complete the request,

.RE

.RS 4
\[bu]    
VV_FC_ERR_UNK if server does not recognize record types used by the client,

.RE

.RS 4
\[bu]    
VV_FC_ERR_OUT_MEM if client is out of memory,

.RE

.RS 4
\[bu]    
VV_FC_ERR_ENV_TOO_LONG if the combined length of all environment variables is too long,

.RE

.RS 4
\[bu]    
VV_FC_ERR_ENV_ODD if the number of supplied environment name/value pairs is incorrect,

.RE

.RS 4
\[bu]    
VV_FC_ERR_BAD_TIMEOUT if the value for timeout is incorrect,

.RE

.RS 4
\[bu]    
VV_FC_ERR_TIMEOUT if the request timed out based on "timeout" parameter or otherwise if the underlying Operating System libraries declared their own timeout.
.RE

You can obtain the error message in "errm" member of "vv_fc" type.

.LP
.B SERVER REPLY
.LP

The server reply is split in two. One part is the actual result of processing (called "stdout" or standard output), and that is "data". The other is the error messages (called "stderr" or standard error), and that's "error". If the server is Vely, all its output goes to "data", except from \fBreport-error\fP and \fBpf-out\fP/\fBpf-url\fP/\fBpf-web\fP (with "to-error" clause) which goes to "error". Note that "data" and "error" streams can be co-mingled when output by the server, but they will be obtained separately. This allows for clean separation of output from any error messages.

You can obtain server reply when it's ready in its entirety (likely most often used), or as it comes alone bit by bit (see more about asynchronous hooks futher here).

.LP
.B STATUS OF REQUEST EXECUTION
.LP

"req_status" member of "vv_fc" type is the request status when a request had executed; it is somewhat similar to an exit status of a program. This is a part of FastCGI specification, and the particular server software you are using may or may not return this status. A Vely server request returns status by means of \fBexit-code\fP statement. Note that "req_status" is valid only if "vv_fc_request()" returned VV_OKAY (or if "return_code" is VV_OKAY for multi-threaded programs).

.LP
.B GETTING DATA REPLY (STDOUT)
.LP

Data returned from a request is valid only if "vv_fc_request()" returned VV_OKAY (or if "return_code" is VV_OKAY for multi-threaded programs). In that case, use "vv_fc_data()" function, for example:

.RS 4
.EX

// Declare and initialize request variable
vv_fc req = {0};
// Setup the req variable
\[char46]..
// Execute request
if (vv_fc_request (&req) == VV_OKAY) {
    char *data = vv_fc_data (req); // data response
    int data_len = req->data_len; // length of data response in bytes
}

.EE
.RE

"data_len" member of "vv_fc" type will have the length of data response in bytes. The reply is always null-terminated as a courtesy, and "data_len" does not include the terminating null byte.

"vv_fc_data()" returns the actual response (i.e. data output) from server as passed to "data" stream. If you are using Vely server, any output will go there, except when "to-error" clause is used in \fBpf-out\fP, \fBpf-url\fP and \fBpf-web\fP - use these constructs to output errors without stopping the request's execution. Additionaly, the output of \fBreport-error\fP will also not go to data output.

.LP
.B GETTING ERROR REPLY (STDERR)
.LP

An error reply returned from a request is valid only if "vv_fc_request()" returned VV_OKAY (or if "return_code" is VV_OKAY for multi-threaded programs). In that case, use "vv_fc_error()" function, for example:

.RS 4
.EX

// Declare and initialize request variable
vv_fc req = {0};
// Setup the req variable
\[char46]..
// Execute request
if (vv_fc_request (&req) == VV_OKAY) {
    char *err = vv_fc_error (req); // error response
    int err_len = req->error_len; // length of error response in bytes
}

.EE
.RE

"vv_fc_error()" returns any error messages from a server response, i.e. data passed to "error" stream. For a Vely server, it is comprised of any output when "to-error" clause is used in \fBpf-out\fP, \fBpf-url\fP and \fBpf-web\fP, as well as any output from \fBreport-error\fP. 

"error_len" member (of "vv_fc" type above) will have the length of error response in bytes. The response is always null-terminated as a courtesy, and "error_len" does not include the terminating null byte.

.LP
.B FREEING THE RESULT OF A REQUEST
.LP

Once you have obtained the result of a request, and when no longer needed, you should free it by using "vv_fc_delete()":

.RS 4
.EX

// Declare and initialize request variable
vv_fc req = {0};
// Setup the req variable
\[char46]..
// Execute request
vv_fc_request (&req);
// .. Use the result ..
// Free request output (data and error streams)
vv_fc_delete (&req);

.EE
.RE

If you do not free the result, your program may experience a memory leak. If your program exits right after issuing any request(s), you may skip freeing results as that is automatically done on exit by the Operating System. 

You can use "vv_fc_delete()" regardless of whether "vv_fc_request()" returned VV_OKAY or not.

.LP
.B COMPLETION HOOK
.LP

A function you wrote can be called when a request has completed. This is useful in multithreaded invocations, where you may want to receive complete request's results as they are available. To specify a completion hook, you must write a C function with the following signature and assign it to "done_hook" member of "vv_fc" typed variable:

.RS 4
.EX

typedef void (*vv_fc_done_hook)(char *recv, int recv_len, char *err, int err_len, vv_fc *req);

.EE
.RE

"recv" is the request's data output, "recv_len" is its length in bytes, "err" is the request's error output, and "err_len" is its length in bytes. "req" is the request itself which you can use to obtain any other information about the request. In a single threaded environment, these are available as members of the request variable of "vv_fc" type used in the request, and there is not much use for a completion hook. 

See an example with asynchronous hooks.

.LP
.B ASYNCHRONOUS HOOKS
.LP

You can obtain the server's reply as it arrives by specifying read hooks. This is useful if the server supplies partial replies over a period of time, and your application can get those partial replies as they become available.

To specify a hook for data output (i.e. from stdout), you must write a C function with the following signature and assign it to "out_hook":

.RS 4
.EX

typedef void (*vv_fc_out_hook)(char *recv, int recv_len, vv_fc *req);

.EE
.RE

"recv" is the data received and "recv_len" is its length.

To specify a hook for error output (i.e. from stderr), you must write a C function with the following signature and assign it to "err_hook":

.RS 4
.EX

typedef void (*vv_fc_err_hook)(char *err, int err_len, vv_fc *req);

.EE
.RE

"err" is the error received and "err_len" is its length.

"req" (in both hooks) is the request itself which you can use to obtain any other information about the request.

To register these functions with "vv_fc_request()" function, assign their pointers to "out_hook" and "err_hook" members of request variable of type "vv_fc" respectively. Note that the output hook (i.e. hook function of type "vv_fc_out_hook") will receive empty string ("") in "recv" and "recv_len" will be 0 when the request has completed, meaning all server output (including error) has been received. 

For example, functions "get_output()" and "get_err()" will capture data as it arrives and print it out, and get_complete() will print the final result:

.RS 4
.EX

// Output hook
void get_output(char *d, int l, vv_fc *req)
{
    printf("Got output of [%.*s] of length [%d] in thread [%d]", l, d, l, req->thread_id);
}

// Error hook
void get_err(char *d, int l, vv_fc *req)
{
    printf("Got error of [%.*s] of length [%d], status [%d]", l, d, l, req->req_status);
}

// Completion hook
void get_complete(char *data, int data_len, char *err, int err_len, vv_fc *req)
{
    printf("Got data [%.*s] of length [%d] and error of [%.*s] of length [%d], status [%d], thread [%d]\en", data_len, data, data_len, err_len, err, err_len, req->req_status, req->thread_id);
}

\[char46]..

vv_fc req = {0};
\[char46]..
// Register output and error hooks, as well as a completion hook
req.out_hook = &get_output;
req.err_hook = &get_err;
req.done_hook = &get_complete;


.EE
.RE


.LP
.B MULTITHREADING
.LP

The FastCGI client is MT-safe, meaning you can use it both in single-threaded and multi-threaded programs. Note that each thread must have its own copy of "vv_fc" request variable, since it provides both input and output parameters to a request call and as such cannot be shared between the threads.

.LP
.B USAGE
.LP

Do not use this API directly with Vely - use \fBcall-server\fP instead which is made specifically for use in .vely files. Otherwise, you can use this API with any program.

.LP
.B USING API WITHOUT VELY
.LP

You can use FastCGI API without installing Vely. To do that:

.RS 4
\[bu]    
get the Vely \fBsource code\fP,

.RE

.RS 4
\[bu]    
copy source files "fcli.c" and "vfcgi.h" to where you need to build your program,

.RE

.RS 4
\[bu]    
add the content of Vely's "LICENSE" file to your own in order to include the license for these source files,

.RE

.RS 4
\[bu]    
then replace "$(vv -i)" in the build line with "fcli.c" to include these files, for instance instead of:

.RS 4
.EX

gcc -o cli cli.c -g $(vv -i)

.EE
.RE

you would write:

.RS 4
.EX

gcc -o cli cli.c -g fcli.c

.EE
.RE


.RE

Note that you do not need to install any other dependencies, as FastCGI API is entirely contained in the aforementioned source files.

.SH EXAMPLES

.LP
.B SIMPLE EXAMPLE
.LP

The following example is a simple demonstration, with minimum of options used. Copy the C code to file "cli.c":

.RS 4
.EX

\[char35]include "vfcgi.h"

void main ()
{
    // Request type vv_fc - create a request variable and zero it out
    vv_fc req = {0};

    req.fcgi_server = "/var/lib/vv/helloworld/sock/sock"; // Unix socket
    req.req_method = "GET"; // GET HTTP method
    req.app_path = "/helloworld"; // application path
    req.req = "/hello-simple"; // request name

    // Make a request
    int res = vv_fc_request (&req);

    // Check return status, and if there's an error, display error code and the
    // corresponding error message. Otherwise, print out server response.
    if (res != VV_OKAY) printf("Request failed [%d] [%s]\en", res, req.errm);
    else printf("%s", vv_fc_data(&req));

    // Free up resources so there are no memory leaks
    vv_fc_delete(&req);
}

.EE
.RE

To make this client application:

.RS 4
.EX

gcc -o cli cli.c -g $(vv -i)

.EE
.RE

In this case, you're using a Unix socket to communicate with the FastCGI server. To test with a Vely request handler, copy the following code to "hello_simple.vely" file:

.RS 4
.EX

\[char35]include "vely.h"
void hello_simple()
{
   silent-header
   out-header default

   @Hi there!
}

.EE
.RE

Create and make the Vely server application and run it via local Unix socket:

.RS 4
.EX

sudo vf -i -u $(whoami) helloworld
vv -q
vf -m quit helloworld
vf -w 1 helloworld

.EE
.RE

Run the FastCGI client:

.RS 4
.EX

\[char46]/cli

.EE
.RE

The output is, as expected:

.RS 4
.EX

Hi there!

.EE
.RE


.LP
.B EXAMPLE WITH MORE OPTIONS
.LP

This example demonstrates using multiple options, including using TCP sockets connecting to a host and port number, environment variables, query string, request body and request execution timeout. It will also show the separation of "data" and "error" (i.e. stdout and stderr) streams from the server.

Copy this to file "cli1.c" - note that in this example FastCGI server will run on localhost (127.0.0.1) and TCP port 2301:

.RS 4
.EX

\[char35]include "vfcgi.h"

void main ()
{
    // Request type vv_fc - create a request variable
    vv_fc req;
    // Initialize request
    memset (&req, 0, sizeof(req));

    // Add 3 environment variables (in the form of name, value, name, value, ... , NULL)
    char *env[] = { "REMOTE_USER", "John", "SOME_VAR", "SOME\enVALUE", "NEW_VAR", "1000", NULL };

    // Create a request
    // Environment variables to pass to server request
    req.env = env;
    // Server IP and port
    req.fcgi_server = "127.0.0.1:2301";
    // Request method
    req.req_method = "GET";
    // Application path
    req.app_path = "/helloworld";
    // Request
    req.req = "/hello";
    // URL payload (path and query string)
    req.url_payload = "par1=val1&par2=91";
    // Content type
    req.content_type = "application/json";
    // Content (i.e. request body)
    req.req_body = "This is request body";
    // Content length
    req.content_len = strlen (req.req_body);
    // No timeout (set to 0)
    req.timeout = 0;

    // Make a request
    int res = vv_fc_request (&req);

    // Check return status, and if there's an error, display error code and the
    // corresponding error message
    if (res != VV_OKAY) printf("Request failed [%d] [%s]\en", res, req.errm);
    else {
       // If successful, display request results
       // Exit code from the server processing
       printf("Server status %d\en", req.req_status);
       // Length of reply from server
       printf("Len of data %d\en", req.data_len);
       // Length of any error from server
       printf("Len of error %d\en", req.error_len);
       // Reply from server
       printf("Data [%s]\en", vv_fc_data(&req));
       // Any error message from server
       printf("Error [%s]\en", vv_fc_error(&req));
    }

    // Free up resources so there are no memory leaks
    vv_fc_delete(&req);
}

.EE
.RE

Note that the URL payload (i.e. "req.url_payload") could have been written as a combination of a path segment and query string (see \fBrequest_URL\fP):

.RS 4
.EX

req.url_payload = "/par1/val1?par2=91";

.EE
.RE

or just as a path segment:

.RS 4
.EX

req.url_payload = "/par1/val1/par2/91";

.EE
.RE

To make this client application:

.RS 4
.EX

gcc -o cli1 cli1.c -g $(vv -i)

.EE
.RE

To test it, you can create a Vely server application. Copy this to "hello.vely" file in a separate directory:

.RS 4
.EX

\[char35]include "vely.h"

void hello()
{
    silent-header
    out-header default

    // Get request body
    request-body rb

    // Input params
    input-param par1
    input-param par2

    // Get environment variables passed on from the client
    get-sys web-environment "REMOTE_USER" to define ruser
    get-sys web-environment "SOME_VAR" to define somev
    get-sys web-environment "NEW_VAR" to define newv

    // Output, print the environment variables, the PID of server process and the request body received from the client
    @Hello World! [<<p-out ruser>>] [<<p-out somev>>] [<<p-out newv>>] [<<p-out par1>>] [<<p-out par2>>] <<pf-out "%d", getpid()>> <<p-out rb>>

    // Output back a number of lines, generally as "Output line #<num of line>"
    // After line #1418, print out "Line 1419 has an error" to stderr
    // After line #4418, report an error and exit
    // This demostrates outputting data to both stdout and stderr
    num i;
    for (i = 0; i < 8000; i++) {
        @Output line #<<p-num i>>
        if (i == 1419) {
            pf-out to-error "Line %lld has an error\en", i
        }
        if (i == 4419) {
            // Exit code of the server execution
            exit-code 82
            report-error "%s", "Some error!"
        }
    }
}

.EE
.RE

Create and make the Vely server application and run it on local TCP port 2301 to match the client above:

.RS 4
.EX

sudo vf -i -u $(whoami) helloworld
vv -q
vf -m quit helloworld
vf -w 1 -p 2301 helloworld

.EE
.RE

Run the FastCGI client:

.RS 4
.EX

\[char46]/cli1

.EE
.RE

The output:

.RS 4
.EX

Server status 82
Len of data 78530
Len of error 35
Data [Hello World! [John] [SOME
VALUE] [1000] [val1] [91] 263002 This is request body
Output line #0
Output line #1
Output line #2
Output line #3
Output line #4
Output line #5
Output line #6
Output line #7

\[char46]..
Output line #4413
Output line #4414
Output line #4415
Output line #4416
Output line #4417
Output line #4418
Output line #4419
]
Error [Line 1419 has an error
Some error!
]

.EE
.RE

The output shows server exit code (82, see \fBexit-code\fP in the Vely code above), length of data output, and other information which includes environment variables passed to the server from client, the PID of server process, the request body from the client, and then the error output. Note that the data output (stdout) and the error output (stderr) are separated, since FastCGI protocol does use separate streams over the same connection. This makes working with the output easy, while the data transfer is fast at the same time.
.SH SEE ALSO
 
.B - Client

\fBFastCGI_API\fP  
\fBFastCGI_command_line_client\fP    
See all 
\fBdocumentation\fP
