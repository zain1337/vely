.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
example-hello-world \- Vely documentation (examples)
.SH DESCRIPTION
This is a simple Hello World example. It explains basics of making applications as well as tracing and debugging them.

In a nutshell:  command line; web browser; Nginx; Unix sockets; 2 source files, 6 lines of code.

.LP
.B SCREENSHOTS OF APPLICATION
.LP

Hello World output:
(Image hello_web.png not available in man page, see web page documentation)

.LP
.B SETUP PREREQUISITES
.LP

\fBInstall Vely\fP - you can use standard packaging tools such as \fBapt\fP, \fBdnf\fP, \fBpacman\fP or \fBzypper\fP.

Because it is used in this example, you will need to install \fBNginx\fP as a web server.

After installing Vely, turn on syntax highlighting in vim if you're using it:

.RS 4
.EX

vv -m

.EE
.RE


.LP
.B GET THE SOURCE CODE
.LP

The source code is a part of Vely installation. It is a good idea to create a separate source code directory for each application (and you can name it whatever you like). In this case, unpacking the source code will do that for you:

.RS 4
.EX

tar xvf $(vv -o)/examples/hello-world.tar.gz
cd hello-world

.EE
.RE

.LP
.B SETUP APPLICATION
.LP

The very first step is to create an application. The application will be named "hello-world", but you can name it anything (if you do that, change it everywhere). It's simple to do with \fBvf\fP:

.RS 4
.EX

sudo vf -i -u $(whoami) hello-world

.EE
.RE

This will create a new application home (which is "/var/lib/vv/hello-world") and do the application setup for you. Mostly that means create various subdirectories in the home folder, and assign them privileges. In this case only current user (or the result of "whoami" Linux command) will own those directories with 0700 privileges; it means a secure setup.

.LP
.B BUILD APPLICATION
.LP

Use \fBvv\fP utility to make the application:

.RS 4
.EX

vv -q 

.EE
.RE

.LP
.B START YOUR APPLICATION SERVER
.LP

To start the application server for your web application use \fBvf\fP FastCGI process manager. The application server will use a Unix socket to communicate with the web server (i.e. a reverse-proxy):

.RS 4
.EX

vf -w 3 hello-world

.EE
.RE

This will start 3 daemon processes to serve the incoming requests. You can also start an adaptive server that will increase the number of processes to serve more requests, and gradually reduce the number of processes when they're not needed:

.RS 4
.EX

vf hello-world

.EE
.RE

See \fBvf\fP for more options to help you achieve best performance.

If you want to stop your application server:

.RS 4
.EX

vf -m quit hello-world

.EE
.RE


.LP
.B SETUP WEB SERVER
.LP

This shows how to connect your application listening on a Unix socket (started with \fBvf\fP) to Nginx web server.


.B - Step 1
:
You will need to edit the Nginx configuration file. For Ubuntu and similar:

.RS 4
.EX

sudo vi /etc/nginx/sites-enabled/default

.EE
.RE

while on Fedora and other systems it might be at:

.RS 4
.EX

sudo vi /etc/nginx/nginx.conf

.EE
.RE


Add the following in the "server {}" section ("/hello-world" is the application path (see \fBrequest-URL\fP) and "hello-world" is your application name):

.RS 4
.EX

location /hello-world { include /etc/nginx/fastcgi_params; fastcgi_pass  unix:///var/lib/vv/hello-world/sock/sock; }

.EE
.RE


.B - Step 2
:
Finally, restart Nginx:

.RS 4
.EX

sudo systemctl restart nginx

.EE
.RE

Note: you must not have any other URL resource that starts with "/hello-world" (such as for example "/hello-world.html" or "/hello-world_something" etc.) as the web server will attempt to pass them as a reverse proxy request, and they will likely not work. If you need to, you can change the application path to be different from "/hello-world", see \fBrequest-URL\fP.

.LP
.B ACCESS APPLICATION SERVER FROM THE BROWSER
.LP

Use the following URL(s) to access your application server from a client like browser (see \fBrequest-URL\fP). Use actual IP or web address instead of 127.0.0.1 if different.

.RS 4
.EX

\[char35] Hello world 
http://127.0.0.1/hello-world/hello

.EE
.RE

Note: if your server is on the Internet and it has a firewall, you may need to allow HTTP traffic - see \fBufw\fP, \fBfirewall-cmd\fP etc.

.LP
.B ACCESS APPLICATION SERVER FROM COMMAND LINE
.LP

To access your application server from command line (instead through web browser/web server), use this to see the application response:

.RS 4
.EX

\[char35]Hello world 
export CONTENT_TYPE=
export CONTENT_LENGTH=
export REQUEST_METHOD=GET
export SCRIPT_NAME='/hello-world'
export PATH_INFO='/hello'
export QUERY_STRING=''
cgi-fcgi -connect /var/lib/vv/hello-world/sock/sock /

.EE
.RE

Note: to suppress output of HTTP headers, add this before running the above:

.RS 4
.EX

export VV_SILENT_HEADER=yes

.EE
.RE

If you need to, you can also run your application as a \fBCGI\fP program. 

.LP
.B RUN PROGRAM FROM COMMAND LINE
.LP

Execute the following to run your application from command line (as a command-line utility):

.RS 4
.EX

\[char35]Hello world 
vv -r --app='/hello-world' --req='/hello?' --method=GET --exec

.EE
.RE

You can also omit "--exec" option to output the bash code that's executed; you can then copy that code to your own script. Note: to suppress output of HTTP headers, add "--silent-header" option to the above.
Note: if running your program as a command-line utility is all you want, you don't need to run an application server.

.LP
.B SOURCE FILES
.LP

The following are the source files in this application:

.B - Hello World (hello.vely)

Hello World example outputs HTTP header and a simple message back to the browser.

The file name ("hello.vely") must match the function name implemented in it, so the function's signature is "void hello()". Call it with a URL like:

.RS 4
.EX

http://your-web-site/hello-world/hello

.EE
.RE

Note "/hello-world" path segment - that's the application path and by default the same as application name (see \fBhow-vely-works\fP and \fBrequest-URL\fP). The following path segment is "/hello", which is the request name, and it must match the function name that implements it.

Note the "@" is used to do the output, it's the \fBoutput-statement\fP. You'll probably use that one a lot.

In this case there's only one request file. In a real world application, there'd likely be quite a few. Vely will pick up all .vely files and automatically make them into an application. While at it, it will generate a simple request dispatcher that routes an incoming request to the appropriate code; in this case a "hello" request will be routed to your "void hello()" function.

.RS 4
.EX

\[char35]include "vely.h"

request-handler /hello
   out-header default
   @Hello World!
end-request-handler

.EE
.RE


.LP
.B CHANGING YOUR CODE
.LP

When you change your source code and recompile, vf will automatically pick up that the executable has changed and reload (see \fBvf\fP if you wish to change this behavior), making your web application live instantly. For example, change hello.vely to this:

.RS 4
.EX

\[char35]include "vely.h"

void hello()
{
   out-header default
   @Hello World! And a good day to you too!
}

.EE
.RE

and then recompile:

.RS 4
.EX

vv -q 

.EE
.RE

Now try again from the browser:

.RS 4
.EX

http://127.0.0.1/hello-world/hello

.EE
.RE

The result:
(Image hello_change.png not available in man page, see web page documentation)

.LP
.B GENERATED C CODE, ERRORS, TRACING AND DEBUGGING
.LP

Generated C code is located at:

.RS 4
.EX

/var/lib/vv/bld/hello-world/__hello.o.c

.EE
.RE

It's useful if you'd like to see it or debug your code. 

If you are using your Vely application as a command line program, you can debug it simply by using \fBgdb\fP. 

Note that in order to see the debugging symbols (such as variable names), you should compile your application with --debug flag:

.RS 4
.EX

vv -q --debug 

.EE
.RE

For FastCGI processes, you'd want to start your application as a single process, generally as few as possible, for example, stop your application first and then start as a single process:

.RS 4
.EX

vf -m quit hello-world
vf -w 1 hello-world

.EE
.RE

First, find out the \fBPID\fP of your process:

.RS 4
.EX

ps -ef|grep hello-world.fcgi

.EE
.RE

Then you can load gdb with your application and attach to it - assuming the PID is 12345:

.RS 4
.EX

sudo gdb /var/lib/vv/bld/hello-world/hello-world.fcgi
\[char46].. att 12345

.EE
.RE

To break in your code (in this case in function hello()), do this in gdb:

.RS 4
.EX

br hello

.EE
.RE

If you'd like to break in Vely's request dispatcher, i.e. just before any request is handled:

.RS 4
.EX

br vely_dispatch_request

.EE
.RE

From then on, you can set breakpoints, continue, stop and do anything else to debug your program.

When you debug Vely applications in gdb, each Vely statement is a single execution unit. This is very useful when reporting errors, since they are reported referencing lines in .vely file, in this case hello.vely. Sometimes you'd want to use line numbers of the generated C file, in which case you'd compile with --c-lines flag:

.RS 4
.EX

vv -q --c-lines 

.EE
.RE

Another way to debug your application is to use tracing (see \fBtrace-run\fP). To enable tracing, compile your application with --trace flag:

.RS 4
.EX

vv -q --debug --trace 

.EE
.RE

Trace files are in the trace directory, see \fBhow-vely-works\fP. In our case, trace file would be in this directory:

.RS 4
.EX

/var/lib/vv/hello-world/app/trace

.EE
.RE

and trace file name for the process you're debugging would be (with timestamp being of the time it's written):

.RS 4
.EX

trace-12345-2022-05-17-22-46-54

.EE
.RE

In addition to this, learn more about \fBdebugging\fP Vely applications.
.SH SEE ALSO
 
.B - Examples

\fBexample-client-API\fP  
\fBexample-cookies\fP  
\fBexample-create-table\fP  
\fBexample-develop-web-applications-in-C-programming-language\fP  
\fBexample-distributed-servers\fP  
\fBexample-docker\fP  
\fBexample-encryption\fP  
\fBexample-file-manager\fP  
\fBexample-form\fP  
\fBexample-hash-server\fP  
\fBexample-hello-world\fP  
\fBexample-how-to-design-application\fP  
\fBexample-how-to-use-regex\fP  
\fBexample-json\fP  
\fBexample-multitenant-SaaS\fP  
\fBexample-postgres-transactions\fP  
\fBexamples\fP  
\fBexample-sendmail\fP  
\fBexample-shopping\fP  
\fBexample-stock\fP  
\fBexample-uploading-files\fP  
\fBexample-using-mariadb-mysql\fP  
\fBexample-utility\fP  
\fBexample-write-report\fP    
See all 
\fBdocumentation\fP
