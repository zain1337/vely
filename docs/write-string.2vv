.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
write-string \-  (strings)
.SH PURPOSE
Create complex strings.

.SH SYNTAX

.RS 4
.EX

write-string [ define ] <string>

<any code>

end-write-string [ bytes-written [ define ] <bytes written> ] [ notrim ]

.EE
.RE

.SH DESCRIPTION
Output of any Vely code (that normally would go to a client) can be written into <string>, which can be created (if it doesn't exist) with "define". In between write-string and end-write-string you can write <any Vely code>. For instance you can use database queries, conditional statements, call C code etc., just as you would for any other Vely code. write-strings can be nested, meaning you can use write-string to write to a different string while within write-string, and presumably use that string to output it within the parent.

<string> is \fBallocated memory\fP.

.LP
.B LENGTH OF RESULT
.LP

To get the length of the string written, use the optional "bytes-written" clause, in which case <bytes written> will have the number of bytes written, minus the trailing zero byte (i.e. it is the length of the string output). If <bytes written> is not defined, you can create it with "define" within the statement.

.LP
.B SHORTCUT CODE
.LP

Note that instead of write-string you can also use a shortcut "(("  (and instead of end-write-string you can use "))"  ), for example here a string "fname" holds a full path of a file named "config-install.vely" under the application home directory (see \fBhow_vely_works\fP), and "bw" holds the number of bytes written:

.RS 4
.EX

get-app directory to define home_dir
(( fname
@<<p-out home_dir>>/config-install.vely
)) bytes-written define bw

.EE
.RE


.LP
.B TRIMMING
.LP

Just like with all other Vely code, every line is trimmed both on left and write, so this:

.RS 4
.EX

(( define mystr
@Some string
))

.EE
.RE

is the same as:

.RS 4
.EX

(( define mystr
        @Some string <whitespaces>
))

.EE
.RE

write-string (or "((") statement must always be on a line by itself (and so does end-write-string, or "))" statement). The string being built starts with the line following write-string, and ends with the line immediately prior to end-write-string. 

All trailing empty lines are removed, for example:

.RS 4
.EX

(( define mystr
        @My string
        @
        @
))

.EE
.RE

the above string would have two trailing empty lines, however they will be removed. If you want to skip trimming the trailing whitespaces, use "notrim" clause in end-write-string.

.LP
.B REFERENCING RESULT WITHIN WRITE-STRING
.LP

The <string> pointer (i.e. the result) is set to an empty string at the beginning of write-string; only after end-write-string completes does it take the computed value. That's because using <string> within write-string is generally inefficient as it's value is copied to the result. If you must use the result recursively (which is not recommended), you can save the pointer to it and use it. 

.SH EXAMPLES

.B - Simple

A simple example:

.RS 4
.EX

char *my_str="world";
char *my_str1="and have a nice day too!";

write-string define result_str
@Hello <<p-out my_str>> (<<p-out my_str1>>)
end-write-string

p-out result_str

.EE
.RE

The output is 

.RS 4
.EX

Hello world (and have a nice day too!)

.EE
.RE



.B - Using code inside

Here is using Vely code inside write-string, including database query and conditional statements to produce different strings at run-time:

.RS 4
.EX

input-param selector

char *my_str="world";

write-string define result_str
    if-string selector=="simple"
        @Hello <<p-out my_string>> (and have a nice day too!)
    else-if-string selector=="database"
        run-query @db="select name from employee"
            @Hello <<query-result name>>
            @<br/>
        end-query
    else
        @No message
    end-if
end-write-string

p-out result_str

.EE
.RE

If selector variable is "simple", as in URL 

.RS 4
.EX

https://mysite.com/<app name>/some_service?selector=simple

.EE
.RE

the result is 

.RS 4
.EX

Hello world (and have a nice day too!)

.EE
.RE

If selector variable is "database", as in URL 

.RS 4
.EX

https://mysite.com/<app name>/some_service?selector=database

.EE
.RE

the result may be (assuming "Linda" and "John" are the two employees selected):

.RS 4
.EX

Hello Linda
<br/>
Hello John
<br/>

.EE
.RE

If selector variable is anything else, as in URL 

.RS 4
.EX

https://mysite.com/<app name>/some_service?selector=something_else

.EE
.RE

the result is 

.RS 4
.EX

No message

.EE
.RE

In the above example, "result_str" variable is defined on the spot, but it can also be defined elsewhere without using "define".


.B - Using function calls inside

The following uses functions inside write-string (note that "<<.func2();>>" is simply calling C code as \fBinline_code\fP):

.RS 4
.EX

void func1 ()
{
    char *result_str;

    write-string result_str
        @<<p-out "Result from func2()">> is <<.func2();>>
    end-write-string
    p-out result_str
}

void func2()
{
    p-out "Hello from func2"
}

.EE
.RE

The output from func1() is 

.RS 4
.EX

Result from func2() is Hello from func2

.EE
.RE



.B - Nesting

An example to nest write-strings:

.RS 4
.EX

write-string define str1
    @Hi!
    write-string define str2
        @Hi Again!
   end-write-string
   p-out str2
end-write-string
p-out str1

.EE
.RE

The result is 

.RS 4
.EX

Hi!
Hi Again!

.EE
.RE



.B - Returning result from function

The result of write-string can be returned from a function (because it is heap memory), as in this example:

.RS 4
.EX

void func1 ()
{
   write-string define result_str
       char *func2_result;
       @<<p-out "Result from func2()">> is <<p-out func2(&func2_result)>>
   end-write-string
   p-out result_str
}

char *func2(char **result)
{
   write-string *result
       @<hr/>
       run-query @db="select firstName from employee"
           @Hello <<query-result firstName>>
           @<br/>
       end-query
       @<hr/>
   end-write-string
   return *result;
}

.EE
.RE

The output from func1() is:

.RS 4
.EX

Result from func2() is <hr/>
Hello Linda
<br/>
Hello John
<br/>
<hr/>

.EE
.RE

.SH SEE ALSO
 
.B - Strings

\fBcopy-string\fP  
\fBcount-substring\fP  
\fBlower-string\fP  
\fBnum-string\fP  
\fBsplit-string\fP  
\fBtrim-string\fP  
\fBupper-string\fP  
\fBwrite-string\fP    
See all 
\fBdocumentation\fP
