.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
application-architecture \- Vely documentation (general)
.SH DESCRIPTION

.LP
.B APPLICATION, REQUEST, SOURCE CODE
.LP

An "application" (or a "program") is a single executable program created by \fBvv\fP utility; it can process \fBrequest\fPs. This executable can either run as:

.RS 4
\[bu]    
a server (or "daemon"), which means as any number of processes staying resident in memory, either permanently or based on a workload (see \fBFastCGI\fP),

.RE

.RS 4
\[bu]    
as a program that runs from a command line, a script etc. (see \fBcommand-line\fP).
.RE

The source code for an application is contained in a flat directory. Each request handler is represented by a namesake .vely file. For example, a request "customer" is always entirely contained in file "customer.vely". Typically, requests handled in an application are connected in some way that makes it advantageous to group them together, be it logically, via common dependencies in code, because of reliance on common infrastructure (such as a database for instance), based on performance etc. 

An application contains all request handlers in it, and so can handle any request. Thus, when it runs as a server, any of its processes can handle any request that an application serves. See \fBvely-dispatch-request\fP on how a request is served within an application.

.LP
.B PROJECT
.LP

A "project" is a set of applications that are related in some way; the relationship between them may be purely logical, i.e. only in terms of some kind of business, functional or other commonality. Your project can start being a single program. It may stay that way forever, or it may be split into multiple applications. A split is made much easier by the fact that each request is a single .vely file. 

.LP
.B SPLITTING AN APPLICATION
.LP

Separation of a single application into multiples may be as simple as placing its .vely files into separate directories, creating new applications with \fBvf\fP and building with \fBvv\fP. Note that you may have \fBnon-request\fP source files implementing code that is used in more than one place, i.e. shared among \fBrequest\fP handlers. Such files can stay in one program's source directory, and other programs may simply use those files as soft-linked (using Linux's ln). Access to basic services, such as databases, files or a network, does not change with such a separation, assuming shared infrastructure.

In this scenario, each application will now have its own application path (see \fBrequest-URL\fP); thus, if any of the newly created applications build URLs that would point to another application, they must be changed. Whether your application is \fBmicro, mini or a macro service\fP (macro service being a "monolith"), or a combination thereof, it isn't immutable, and can change over time. 

.LP
.B MODE OF EXECUTION
.LP

The request's input and output are the same regardless of the program's mode of execution, i.e. whether a program runs as an application server or from command line (or both); a request is always served as an HTTP \fBrequest\fP; in addition, a \fBcommand-line\fP program can suppress HTTP header output.  An application may need both modes of execution for different aspects of its functioning. For example, much of the web interface would run as application server(s), and perhaps data conversion and periodic cron jobs would be better served by command-line programs. In many cases, the same code may serve both, such as when the same tasks are performed as a batch job and as a web request.

.LP
.B TESTABILITY
.LP

Requests are always valid HTTP requests, and operate as such. This makes testing/mocking easier regardless of the mode of execution (i.e. application server or command line). Testing can be performed via:

.RS 4
\[bu]    
executing a program on a \fBcommand-line\fP,

.RE

.RS 4
\[bu]    
or to test server execution, by using \fBFastCGI-command-line-client\fP, \fBcURL\fP utility, or with a \fBFastCGI-API\fP for any programming language that has C linkage (virtually all do).
.RE

For example, REST interface can be easily tested by using a command-line program, without the need for a web interface.

.LP
.B DATABASES
.LP

Access to databases is provided via statements like \fBrun-query\fP, which are independent of the data source; different databases can be swapped without changing the code, even between different vendors (save for any differences in SQL dialects). A separate data model (i.e. data abstraction over actual queries) may or may not be needed; here are some reasons why you can go without it for simpler design/development and better maintainability:

.RS 4
\[bu]    
\fBrun-query\fP is designed to provide a readable interface (i.e. with input and output data) in single statement, thus playing a role of a data-accessor. Query text may be used directly, or from a another source (i.e. an array of queries, defined elsewhere, obtained from a function etc.).

.RE

.RS 4
\[bu]    
Too much data abstraction may result in a disconnect between application logic and data when it comes to readability of the design and the code, while the abstraction itself may present a significant overhead. 

.RE

.RS 4
\[bu]    
It may be beneficial for queries to convey application logic and be close to their functional place of use in order to maximize performance and maintainability.
.RE


.RE

.RS 4
\[bu]    
Using the same database structure directly in development and testing reduces side effects that affect performance and functionality often seen with substitute data sources.
.RE


.LP
.B SESSION MANAGEMENT, STICKYNESS
.LP

A "session" is any data connected to a particular end-user who is communicating with application(s). An end-user would login to your application(s) and during such a session any data exchanged would be:

.RS 4
\[bu]    
secure, i.e. no other end-user could eavesdrop or alter the data exchanged, and

.RE

.RS 4
\[bu]    
relevant and separate from other end-users.
.RE

Vely application servers run as a separate layer, i.e separately from web server(s) for performance, safety, scalability and usability; they can be accessed in a number of ways, with web servers being just one. Session information should never be kept in any particular web server instance or application process; rather it resides in a database layer, which can be:

.RS 4
\[bu]    
a database like MariaDB or PostgreSQL,

.RE

.RS 4
\[bu]    
a caching solution (like Redis),

.RE

.RS 4
\[bu]    
Vely application using a database (persistent, in-memory such as SQLite, etc.),

.RE

.RS 4
\[bu]    
or other high performance data stores.
.RE

This makes application design easier and more robust from the start, because it allows for proper session store that scales without having to worry about "sticking" to a particular end-point web server or process. Rather, stickyness is achieved by keeping the session information in a data layer; such session information can then be accessed from any process of any application by simply querying it.

For performance considerations, typically there are three components to a database design in regards to session management:

.RS 4
\[bu]    
Credentials data,

.RE

.RS 4
\[bu]    
Session data, and

.RE

.RS 4
\[bu]    
User data
.RE

The minimal information you'd need for any kind of session management scenario to work is:

.RS 4
\[bu]    
User ID - a unique identifier assigned to each end-user.

.RE

.RS 4
\[bu]    
Session ID - a unique session identifier assigned to each session of each end-user.
.RE

User ID would be obtained during login (based on credentials such as user name and password for instance), in order to grant access to application(s); this is what Credentials data is for, and during such login a Session ID is created. 

The subsequent requests from a logged-on user would be based on both User ID and Session ID, which would be used to verify that end-user has the permission to access data, and which is initially provided to the end-user and then passed back to application(s) via secure cookies. After that, User ID is used to perform the actual requests, while Session ID is used to update the Session data with whatever information application(s) require. All such data manipulations are performed via queries (not necessarily SQL queries, though it may be the most common kind).

With this architecture, the stickyness of an end-user's session is achieved regardless of which web server(s), application(s) or application's processes are handling the request; any architecture may want to prioritize this independence from the underlying infrastructure and physical implementation. In addition, for better performance and scaling up, the Credentials, Session and User data can be separated. In most cases, all three of those are contained in a single database (see \fBmultitenant SaaS example\fP of this). When you need to scale up, you can separate Credentials and Session data, as well as User data (i.e. transactional database that contains the actual useful end-user's data) in their own physical databases. 

Note that this kind of separation can be across different CPUs on a same server, or on different servers connected to a high-speed local network, or some other form of separation. You may also choose to have session data in-memory only to speed up updates and queries - this decision is about business requirements and allowable risks in case such database needs to be restarted for whatever reason. If better reliability is needed (in case database(s) go down), a high-availability database solution may be used, like clustering/mirroring/failover etc. The strategy used should generally avoid process synchronization on an application or caching level, as it tends to eventually slow down the application and grow in complexity. 

These concepts are shown here:
(Image arch8.png not available in man page, see web page documentation)

.LP
.B SERVICES (LOCAL AND REMOTE) IN A FUNCTIONAL AND DECLARATIVE MODEL
.LP

Vely is functional and declarative, with basic services provided to you via \fBstatements\fP; that's their major purpose. For example, data sanitation and database access including connection handling, input, output, distributed computing, files, encryption, pattern matching and other such basic components are built-in - these are provided by Vely statements. You can write \fBnon-request\fP code to create higher-value components of your own that can be shared between requests in the same program, or even between different programs.

A request can be viewed as an HTTP function, where input is provided and output is made available via HTTP protocol to the caller, though this is decoupled from the web (and network in general): it can function as a web service or a command-line program execution. When running on a server, a request is suitable for a wide variety of methodologies (REST-like, generic Remote-Call type of processing, etc.) by calling it with:

.RS 4
\[bu]    
\fBcall-server\fP, for accessing remote services via fast and direct binary protocol on secure networks, or

.RE

.RS 4
\[bu]    
\fBcall-web\fP, for using remote services on the web with secure SSL/TSL connection.
.RE


.LP
.B TASKS
.LP

A request may service either a singular purpose (such as with a microservice) or be divided into tasks (and then subtasks). Tasks (or subtasks) do not have to be exlusively separated in terms of functionality, i.e. differents tasks may perform overlapping functions via shared code. Any input parameter (see \fBtask-param\fP) can indicate which task a request should perform. Whatever services your application provides, each such service can be identified with:

.RS 4
\[bu]    
a request and

.RE

.RS 4
\[bu]    
an optional task within a request.

.RE

.RS 4
\[bu]    
an optional subtask within a task, etc.
.RE

For an example of tasks and subtasks, see \fBif-task\fP. Your application should not have (sub)tasks that are too many or too deep. Often, the best solution may be for a request to perform a single task (i.e. it would not need a \fBtask-param\fP). Tasks should generally serve a request's purpose and such purpose should be as elementary as possible. The delineation of where "elementary" ends isn't a hard rule; rather it's best to remember that a request should be a logical action that (for whatever reason) is not conducive to further simplification by dividing it.

Interpreting and handling task(s) in as little code as close together as possible is preferrable. This means if determining which task to execute and actually executing its functionality is possible without any additional layers of abstraction, it is likely to be more readable and easier to maintain.

In general, the execution flow of a program is:
(Image arch6.png not available in man page, see web page documentation)
Within a request, if tasks are used, the support for tasks is semantic and self-documenting:
(Image arch7.png not available in man page, see web page documentation)
Without using tasks, you would likely have request paths such as "/customer/add" or "/customer/update" served by source files "customer__add.vely" or "customer__update.vely" (see \fBrequest-URL\fP). It is up to you to decide which method better serves your purpose: using tasks within a request, or using separate requests each handling a single task. In general you might want to keep the number of tasks per requests small, likely no more than 3 or 4; if you have more, it may be better to split them into separate requests. However, depending on your application design, this isn's a hard rule: your application logic, and requirements about how it is designed and maintained may override such guidelines.

.LP
.B REQUEST DESIGN
.LP

To begin with, the application design should start with a question: what are the requests my application will process? The answer to this question may be known in advance for small applications. For medium-sized or large applications, the answer is a process in itself, typically revealed during the prototyping and the lifecycle of application's design and use.  

There are a few important considerations to take into account when deciding what a request is, i.e. what is its purpose and its input and output, and how to write it:

.RS 4
\[bu]    
Its purpose: understanding any application is easier to design and implement if its components are chosen to logically represent the way end-users consume it, such as roles and functionality on one hand, and resources on the other. "End-users" doesn't necessarily mean humans; many applications's end-users are other machines, be it servers in a multi-layered design, API endpoints in user-interfacing devices (such as browsers), end-point consumer electronics (such as thermostats or cars), etc.

.RE

.RS 4
\[bu]    
Its scope: a request should be the simplest that serves a purpose you had in mind. Dividing it into simpler ones just for the sake of division isn't a good strategy, just as "packing" a request with more functionality than it warrants isn't a good strategy either.

.RE

.RS 4
\[bu]    
Performance: creating too many layers of an "onion" or too many layers of abstraction may lower performance to unacceptable levels. In addition, since request names are constants, Vely optimizes request dispatching to the point where the cost of such dispatching (within a process) is constant, regardless of the number of requests (i.e. number of .vely files) your application serves. Don't be afraid to have as many requests as it makes sense to you.

.RE

.RS 4
\[bu]    
Ease of understanding: future maintainers of your applications may not appreciate too many layers of abstraction either.

.RE

.RS 4
\[bu]    
Sharing and extensibility: is a request standalone, without shared code or data source dependencies (meaning shared with other requests)? Sharing of code can be local via \fBnon-request\fPs, or remote via \fBcall-server\fP; it may be better to start with local sharing (i.e. non-request code) and use remote services when necessary, especially if horizontal scaling is needed (i.e. adding more computer instances to handle the load). For example, two or more requests can overlap in functionality: you may have a request that creates an entity, and a request that updates it. You can also have a request that creates and updates an entity at the same time to avoid performance issues of multiple calls. A \fBnon-request\fP code would be used to reuse the functionality across such requests without duplicating code.
.RE

.SH SEE ALSO
 
.B - General

\fBabout-Vely\fP  
\fBapplication-architecture\fP  
\fBdeploying-application\fP  
\fBhow-vely-works\fP  
\fBquality-control\fP  
\fBrename-files\fP  
\fBSELinux\fP  
\fBvely-architecture\fP  
\fBvely-removal\fP  
\fBvely-version\fP  
\fBvf\fP  
\fBvv\fP    
See all 
\fBdocumentation\fP
