.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
delete-mem \-  (memory)
.SH PURPOSE
Free memory.

.SH SYNTAX

.RS 4
.EX

delete-mem <memory> status [ define ] <status>

.EE
.RE

.SH DESCRIPTION
delete-mem frees memory allocated by Vely. Do not use it on memory allocated by any C-library functions (such as malloc(), calloc() or realloc()).

delete-mem will attempt to handle memory violations or invalid pointers, and may not \fBerror out\fP if there is an issue; if the error is too severe, it will error out. If it doesn't error out, you can obtain the status of freeing memory in variable <status> by using "status" clause (you can create this number variable with "define" if it does not exist). The reason for this is that freeing memory is in many cases unnecessary as Vely will automatically do so at the end of each request and problems in freeing memory will not affect doing so in the end.

If <status> is VV_OKAY, the memory has been freed successfully. If <status> is VV_ERR_MEMORY, there was a problem; most likely <string> was not a valid memory pointer allocated by any of Vely statements; or it was a bad memory pointer for any number of reasons (such as for example it was already freed once). 

.SH EXAMPLES
Allocate and free memory:

.RS 4
.EX

new-mem define mystr size 300
delete-mem mystr status define st
if (st != VV_OKAY) {
    @Error in memory release!
}

.EE
.RE

Free memory allocated by write-string (consisting of 100 "Hello World" statements):

.RS 4
.EX

write-string define ws
    num i;
    for (i = 0; i < 100; i++) {
        @Hello World
    }
end-write-string
delete-mem ws 

.EE
.RE

.SH SEE ALSO
 
.B - Memory

\fBdelete-mem\fP  
\fBmanage-memory\fP  
\fBmemory-handling\fP  
\fBnew-mem\fP  
\fBresize-mem\fP    
See all 
\fBdocumentation\fP
