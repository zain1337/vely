.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
read-server \-  (distributed-computing)
.SH PURPOSE
Get results of a server call.

.SH SYNTAX

.RS 4
.EX

read-server <server> \\
    [ data [ define ] <data> ] \\
    [ data-length [ define ] <data length> ] \\
    [ error [ define ] <error> ] \\
    [ error-length [ define ] <error length> ] \\
    [ status [ define ] <status> ] \\
    [ status-text [ define ] <status text> ] \\
    [ request-status [ define ] <request status> ] 

.EE
.RE

.SH DESCRIPTION
Use read-server to get the results of \fBcall-server\fP; the same <server> must be used in both.


.B - Getting the reply from server

The server reply is split in two. One part is the actual result of processing (called "stdout" or standard output), and that is "data". The other is the error messages (called "stderr" or standard error), and that's "error". If the server is Vely, all its output goes to "data", except from \fBreport-error\fP and \fBpf-out\fP/\fBpf-url\fP/\fBpf-web\fP (with "to-error" clause) which goes to "error". Note that "data" and "error" streams can be co-mingled when output by the server, but they will be obtained separately. This allows for clean separation of output from any error messages.

<data> is the "data" reply of a server call (in "data" clause), <data length> is the number of bytes in <data> (in "data-length" clause). <error> is the "error" reply (in "error" clause), <error length> is the number of bytes in <error> (in "error-length" clause"). Note that a null-byte is always placed at the end of both <data> and <error> as a convenience, however this byte is not counted in <data length> and <error length>.


.B - Getting status of a server call

The status of a server call (as a number) can be obtained in <status> (in "status" clause). This is the protocol status of a server call, and it may be:

.RS 4
\[bu]    
VV_OKAY if request succeeded,

.RE

.RS 4
\[bu]    
VV_FC_ERR_RESOLVE_ADDR if host name for TCP connection cannot be resolved,

.RE

.RS 4
\[bu]    
VV_FC_ERR_PATH_TOO_LONG if path name of Unix socket is too long,

.RE

.RS 4
\[bu]    
VV_FC_ERR_SOCKET if cannot create a socket (for instance they are exhausted for the process or system),

.RE

.RS 4
\[bu]    
VV_FC_ERR_CONNECT if cannot connect to server (TCP or Unix alike),

.RE

.RS 4
\[bu]    
VV_FC_ERR_SOCK_WRITE if cannot write data to server (for instance if server has encountered an error or is down, or if network connection is no longer available),

.RE

.RS 4
\[bu]    
VV_FC_ERR_SOCK_READ if cannot read data from server (for instance if server has encountered an error or is down, or if network connection is no longer available),

.RE

.RS 4
\[bu]    
VV_FC_ERR_PROT_ERR if there is a protocol error, which indicates a protocol issue on either or both sides,

.RE

.RS 4
\[bu]    
VV_FC_ERR_BAD_VER if either side does not support protocol used by the other,

.RE

.RS 4
\[bu]    
VV_FC_ERR_SRV if server cannot complete the request,

.RE

.RS 4
\[bu]    
VV_FC_ERR_UNK if server does not recognize record types used by the client,

.RE

.RS 4
\[bu]    
VV_FC_ERR_OUT_MEM if client is out of memory,

.RE

.RS 4
\[bu]    
VV_FC_ERR_ENV_TOO_LONG if the combined length of all environment variables is too long,

.RE

.RS 4
\[bu]    
VV_FC_ERR_ENV_ODD if the number of supplied environment name/value pairs is incorrect,

.RE

.RS 4
\[bu]    
VV_FC_ERR_BAD_TIMEOUT if the value for timeout is incorrect,

.RE

.RS 4
\[bu]    
VV_FC_ERR_TIMEOUT if the request timed out based on "timeout" parameter or otherwise if the underlying Operating System libraries declared their own timeout.
.RE

You can also obtain the status text in <status text> (in "status-text" clause); this is a human readable status message which is am empty string (i.e. "") if there is no error (meaning if <status> is VV_OKAY).


.B - Getting request (application) status

<request status> (in "request-status" clause) is the return status (as a number) of the code executing a remote server call; it is similar to a return value from a function. The particular server code you are calling may or may not return the status. If you are calling Vely server code, the return status can be sent back via \fBexit-code\fP statement.

For any of the above values you can obtain with read-server, you can create them with "define" statement. You must specify at least one value to obtain in read-server, or any number of them.

.SH EXAMPLES
See examples in \fBnew-server\fP and \fBcall-server\fP.
.SH SEE ALSO
 
.B - Distributed computing

\fBcall-server\fP  
\fBdelete-server\fP  
\fBnew-server\fP  
\fBread-server\fP    
See all 
\fBdocumentation\fP
