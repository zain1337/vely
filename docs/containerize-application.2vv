.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
containerize-application \- Vely documentation (running-application)
.SH DESCRIPTION
This is a short tutorial on building a base Vely image, and an application image (regardless of what your application does) that can be deployed anywhere, even on non-Linux systems. This is one way to deploy your Vely application. See also \fBexample-docker\fP for an example you can run. You can use \fBdocker\fP or \fBpodman\fP (substitute podman for docker).

The application container has a Vely application installed, and your reverse proxy web server and your databases must be created (see \fBapplication-setup\fP for more information), as they will likely either run on the host machine, or be containers themselves.

The base image used here is "vely" (created in the previous step). User "vely" is created and assigned limited sudo privileges for Vely only. Source code of your application is in "docker" directory on the host, and copied to the container, where application is compiled and linked, then source code is deleted, making the container ready for deployment (if you wish to keep the source, you certaintly can, just remove the lines that delete it). Finally, the entry point will start application - that's what runs when the container is deployed.

The following shows how to create a deployment image and a subsequent running container. The application name is "velydemo" - change it as needed.

.RS 4
.EX

\[char35]
\[char35] Create base vely image. Install Vely on top of Ubuntu 20.04
\[char35]
FROM ubuntu:20.04
ENV TZ=America/Phoenix
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt update
RUN apt install -y apt-transport-https ca-certificates wget sudo
RUN wget  -qO - https://vely.dev//pkg/OPENPGP|sudo tee /usr/share/keyrings/vely.asc >/dev/null
ARG arch
RUN sudo bash -c "echo 'deb [signed-by=/usr/share/keyrings/vely.asc] https://vely.dev//pkg/ubuntu_20_$arch/latest ubuntu_20_$arch vely' >/etc/apt/sources.list.d/vely.list"
RUN sudo apt update
RUN sudo apt install -y vely

.EE
.RE

Create an image with - use --no-cache in order to update the image when new Vely release is available:

.RS 4
.EX

sudo docker build --no-cache -t vely .

.EE
.RE

In some cases your application is stateless, i.e. all the data is through to database(s) and other applications. In other cases, you may want to have file storage that persists even when containers recycle - typically that means persisting Vely directory (which is /var/lib/vv, see \fBhow-vely-works\fP). In that case, you can use a container storage option for that purpose; in case of docker, that would be volumes, for instance:

.RS 4
.EX

sudo docker volume create velyhome

.EE
.RE

For example, if your application uploads/downloads files, you may use Vely \fBfile-storage\fP (which is under /var/lib/vv); or you may store other files that your application produces. In such cases using a volume (or similar) may be a good idea; in other cases you may want a stateless container and offload such functionality elsewhere (for instance to databases, other applications etc.).

Next is velyapp.dockerfile, which is used to create an image for an application. In this case it is a demo application with source code in "docker" directory (under the current working directory):

.RS 4
.EX

\[char35]
\[char35] Create image that will be used to compile and link an application. Source code is copied from host,
\[char35] application is setup, and the source code is deleted (remove this step if you want to ship the source code).
\[char35] After that the image is ready to run in a container. Here, the application name is "velydemo"; change it to
\[char35] fit your application. The port used in 2300, you can change that as well.
\[char35] Customize the ENTRYPOINT command to fit your runtime.
\[char35]
FROM vely
\[char35] create vely user and give it limited sudo powers
RUN useradd -ms /bin/bash vely && echo "vely:vely" | chpasswd 
RUN echo "vely ALL=(ALL) NOPASSWD: /usr/bin/vf" >> /etc/sudoers
\[char35] default user
USER vely
\[char35] default working dir
WORKDIR /home/vely
EXPOSE 2300
\[char35] copy over source code and make app
COPY ./docker/* /home/vely/
\[char35] this is to run app with docker run
ENTRYPOINT [ "./runit" ]

.EE
.RE

The "runit" script will create an application in the container, build it, and start it in the foreground. This script is in the "docker" directory with your application source code:

.RS 4
.EX

\[char35]!/bin/bash
\[char35] Create Vely application and run it in foreground for docker
\[char35] demout has a log of execution
sudo vf -i -u $(whoami) velydemo
vv -c
vv -q --db=mariadb:db -s
vv -c
vf -f -w3 -p2300 velydemo > demout


.EE
.RE

Stop and remove any current containers/images:

.RS 4
.EX

sudo docker stop velyapp || true
sudo docker rmi velyapp || true

.EE
.RE

Build an application image:

.RS 4
.EX

sudo docker build --no-cache -t velyapp -f velyapp.dockerfile .

.EE
.RE

Assuming you have setup web server and any database(s), start the container (using "host" network interface for simplicity):

.RS 4
.EX

sudo docker run --init --name velyapp -d  --network="host" --rm velyapp velyapp

.EE
.RE

If your application uses volumes for data persistence, you might use:

.RS 4
.EX

sudo docker run --init --name velyapp -d -v velyhome:/var/lib/vv  --network="host" --rm velyapp

.EE
.RE

Note that you can persist any storage you want, however at the minimum you would likely persist Vely directory (/var/lib/vv) which is stored on the host under volume "velyhome".

Now you can use your application through web server:

.RS 4
.EX

http://127.0.0.1/velydemo/<request name>...

.EE
.RE

.SH SEE ALSO
 
.B - Running application

\fBapplication-setup\fP  
\fBCGI\fP  
\fBcommand-line\fP  
\fBcontainerize-application\fP  
\fBFastCGI\fP  
\fBplain-C-FCGI\fP    
See all 
\fBdocumentation\fP
