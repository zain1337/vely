.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
index \- Vely documentation ()
.SH DESCRIPTION
Vely is a general-purpose framework for rapid development of high-performance software. It is especially well suited for web applications, and it's Free Open Source. Read more \fBabout_Vely\fP.

Vely is unlike typical programming languages or frameworks you may have used. It might remind you of SQL, as it is declarative and simple, yet powerful. Vely brings rich functionality, great productivity and ergonomics, and most importantly, high performance. It generates C code from statements that perform entire tasks. 

Want more performance? \fBTry\fP Vely from prebuilt packages or from a source build, then head over to plenty of \fBexamples\fP. Check out the article about Vely on \fBSoftware Development Times\fP and the latest \fBHackernoon\fP!

.LP
.B SAMPLE APPLICATIONS
.LP


.LP
.B BUYING OR LEASING A CAR
.LP

This shows how to implement services that buy or lease a car - the actual functional bit is not here for simplicity. This is a short version, see \fBhere\fP for a complete example.

.B - Buying with a loan

Here's a request handler implementing a request to buy a car with a loan in file "shop__buy__loan.vely" - note that the request path is "/shop/buy/loan":

.RS 4
.EX

\[char35]include "vely.h"

request-handler /shop/buy/loan
    out-header default

    input-param lot
    input-param doors
    input-param interest_rate
    @Buying a car using a loan with interest rate of <<p-out interest_rate>>%.

    @Hello, you are interested in a <<p-out lot>> car with <<p-out doors>> doors!
end-request-handler

.EE
.RE


.B - Buying for cash

Next, a request to buy a car with cash in file "shop__buy__cash.vely":

.RS 4
.EX

\[char35]include "vely.h"

request-handler /shop/buy/cash
    out-header default

    input-param lot
    input-param doors
    @Buying a car using cash.

    @Hello, you are interested in a <<p-out lot>> car with <<p-out doors>> doors!
end-request-handler

.EE
.RE


.B - Leasing

Finally, a request to lease a car in file "shop__lease.vely":

.RS 4
.EX

\[char35]include "vely.h"

request-handler /shop/lease
    out-header default

    input-param lot
    input-param doors

    @Leasing a car.
    @Hello, you are interested in a <<p-out lot>> car with <<p-out doors>> doors!
end-request-handler

.EE
.RE


.B - Make application

To make this into an application, use \fBvv\fP with "-q" option:

.RS 4
.EX

vv -q

.EE
.RE


.B - Using it

Buying with financing:

.RS 4
.EX

https://.../cars/_shop/buy/loan_/lot/new/interest-rate/3?doors=4

.EE
.RE

Then to buy for cash:

.RS 4
.EX

https://.../cars/_shop/buy/cash_/lot/new/doors/4

.EE
.RE

and to lease:

.RS 4
.EX

https://../cars/_shop/lease_/lot/new/doors/4

.EE
.RE

Or from command line, for example:

.RS 4
.EX

vv -r --req="/_shop/buy/loan_/lot/new/interest-rate/3?doors=4"  --exec --silent-header

.EE
.RE


.LP
.B ADD A CUSTOMER
.LP

This adds a customer to a SQL database and outputs newly created customer ID as JSON document. Customer's first and last name are input parameters. This is sample code, see \fBhere\fP for a complete example.

.RS 4
.EX

\[char35]include "vely.h"
// Create request handler
request-handler /add-customer
    out-header use content-type "application/json"

    // Get input parameters
    input-param first_name
    input-param last_name

    // Run database query 
    run-query @db_shopping = \\
      "insert into customers (firstName, lastName) values ('%s', '%s') returning customerID" \\
      input first_name, last_name \\
      output define customerID 

        // Output JSON document
        @"<<p-out customerID>>"

    end-query
end-request-handler

.EE
.RE


.B - The application

Let's name this application "shopping" and create it:

.RS 4
.EX

sudo vf -i -u $(whoami) shopping

.EE
.RE

And now build the application - Vely will automatically make all .vely files:

.RS 4
.EX

vv -q

.EE
.RE

This gives you a command-line program, and a server executable. You can test with either one, and they both work exactly the same. This makes it easy to automate tests. The little code example and the tools shown here exemplify Vely philosophy: simple, declarative and highly functional Vely code, with just a skeleton C. Of course, you can write any C code you like, but generally you don't need to. The result is easy to read, maintain, and of high performance. Same goes for Vely tools.

.B - Using as a service

To start your application as an application server, simply do:

.RS 4
.EX

vf shopping

.EE
.RE

You can talk to this server directly from another program or application (see \fBhere\fP or \fBhere\fP), with a \fButility\fP, or via standard web servers like Apache or Nginx, see \fBhere\fP for a complete example. Check out examples of using this service RESTfully, or as a URL query:

.RS 4
.EX

https://.../add-customer/first-name/Roy/last-name/Delgado

.EE
.RE

or

.RS 4
.EX

https://.../add-customer?first-name=Roy&last-name=Delgado

.EE
.RE


.B - From command-line

A command line uses the same URL interface for input parameters; here's an example of executing it from command line:

.RS 4
.EX

vv -r --app=/api/v1/shopping --req="/add-customer/first-name/Roy/last-name/Delgado" --method=GET --exec

.EE
.RE

This is great for writing programs executed from command line, such as in scripts, or as utilities. It's also a great way to test your web applications, because a command line program and an application server serve the exact same requests, take the same input and output, and work the same. If you skip --exec option above, you'll get bash code to run the program directly (and faster), see \fBvv\fP.
