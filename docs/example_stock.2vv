.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
example_stock \- Vely documentation (examples)
.SH DESCRIPTION
Stock ticker application
Stock ticker example will create a new ticker (stock name and its price) or update an existing one, and display the stock ticker database.

In a nutshell: MariaDB; command line; web browser; Nginx; Unix sockets; 3 source files, 53 lines of code.

.LP
.B SCREENSHOTS OF APPLICATION
.LP

Stock value is updated:
(Image stock_update.png not available in man page, see web page documentation)
Showing the stock:
(Image stock_show.png not available in man page, see web page documentation)

.LP
.B SETUP PREREQUISITES
.LP

\fBInstall Vely\fP - you can use standard packaging tools such as \fBapt\fP, \fBdnf\fP, \fBpacman\fP or \fBzypper\fP.

Because they are used in this example, you will need to install \fBNginx\fP as a web server and \fBMariaDB\fP as a database.

After installing Vely, turn on syntax highlighting in vim if you're using it:

.RS 4
.EX

vv -m

.EE
.RE


.LP
.B GET THE SOURCE CODE
.LP

The source code is a part of Vely installation. It is a good idea to create a separate source code directory for each application (and you can name it whatever you like). In this case, unpacking the source code will do that for you:

.RS 4
.EX

tar xvf $(vv -o)/examples/stock.tar.gz
cd stock

.EE
.RE

.LP
.B SETUP APPLICATION
.LP

The very first step is to create an application. The application will be named "stock", but you can name it anything (if you do that, change it everywhere). It's simple to do with \fBvf\fP:

.RS 4
.EX

sudo vf -i -u $(whoami) stock

.EE
.RE

This will create a new application home (which is "/var/lib/vv/stock") and do the application setup for you. Mostly that means create various subdirectories in the home folder, and assign them privileges. In this case only current user (or the result of "whoami" Linux command) will own those directories with 0700 privileges; it means a secure setup.

.LP
.B SETUP THE DATABASE
.LP

Before any coding, you need some place to store the information used by the application. First, you will create MariaDB database "db_stock" owned by user "vely" with password "your_password". You can change any of these names, but remember to change them everywhere here. And then, you will create database objects in the database.

Execute the following logged in as root in \fBmysql utility\fP:

.RS 4
.EX

--Create velydb database hosting application data (if it doesn't exist):
create database if not exists db_stock;
create user if not exists vely identified by 'your_password';
grant create,alter,drop,select,insert,delete,update on db_stock.* to vely;
-- Create database objects needed for the application (eg. tables, indexes):
use db_stock;
source setup.sql;
exit

.EE
.RE


.LP
.B CONNECT VELY TO A DATABASE
.LP

In order to let Vely know where your database is and how to log into it, you will create \fBdatabase_config_file\fP named "db_stock". This name doesn't have to be "db_stock", rather it can be anything - this is the name used in actual database statements in source code (like \fBrun-query\fP), so if you change it, make sure you change it everywhere. Create it:

.RS 4
.EX

echo '[client]
user=vely
password=your_password
database=db_stock
protocol=TCP
host=127.0.0.1
port=3306' > db_stock

.EE
.RE

The above is a \fBstandard mariadb client options file\fP. Vely uses native MariaDB database connectivity, so you can specify any options that a given database lets you.

.LP
.B BUILD APPLICATION
.LP

Use \fBvv\fP utility to make the application:

.RS 4
.EX

vv -q --db=mariadb:db_stock 

.EE
.RE

Note usage of --db option to specify MariaDB database and the database configuration file name.

.LP
.B START YOUR APPLICATION SERVER
.LP

To start the application server for your web application use \fBvf\fP FastCGI process manager. The application server will use a Unix socket to communicate with the web server (i.e. a reverse-proxy):

.RS 4
.EX

vf -w 3 stock

.EE
.RE

This will start 3 daemon processes to serve the incoming requests. You can also start an adaptive server that will increase the number of processes to serve more requests, and gradually reduce the number of processes when they're not needed:

.RS 4
.EX

vf stock

.EE
.RE

See \fBvf\fP for more options to help you achieve best performance.

If you want to stop your application server:

.RS 4
.EX

vf -m quit stock

.EE
.RE


.LP
.B SETUP WEB SERVER
.LP

This shows how to connect your application listening on a Unix socket (started with \fBvf\fP) to Nginx web server.


.B - Step 1
:
You will need to edit the Nginx configuration file. For Ubuntu and similar:

.RS 4
.EX

sudo vi /etc/nginx/sites-enabled/default

.EE
.RE

while on Fedora and other systems it might be at:

.RS 4
.EX

sudo vi /etc/nginx/nginx.conf

.EE
.RE


Add the following in the "server {}" section ("/stock" is the application path (see \fBrequest_URL\fP) and "stock" is your application name):

.RS 4
.EX

location /stock { include /etc/nginx/fastcgi_params; fastcgi_pass  unix:///var/lib/vv/stock/sock/sock; }

.EE
.RE


.B - Step 2
:
Finally, restart Nginx:

.RS 4
.EX

sudo systemctl restart nginx

.EE
.RE

Note: you must not have any other URL resource that starts with "/stock" (such as for example "/stock.html" or "/stock_something" etc.) as the web server will attempt to pass them as a reverse proxy request, and they will likely not work. If you need to, you can change the application path to be different from "/stock", see \fBrequest_URL\fP.

.LP
.B ACCESS APPLICATION SERVER FROM THE BROWSER
.LP

Use the following URL(s) to access your application server from a client like browser (see \fBrequest_URL\fP). Use actual IP or web address instead of 127.0.0.1 if different.

.RS 4
.EX

\[char35] Add stock ticker 'XYZ' with stock price 450 
http://127.0.0.1/stock/add-stock?name=XYZ&price=450

\[char35] Display list of stock tickers 
http://127.0.0.1/stock/show-stock

.EE
.RE

Note: if your server is on the Internet and it has a firewall, you may need to allow HTTP traffic - see \fBufw\fP, \fBfirewall-cmd\fP etc.

.LP
.B ACCESS APPLICATION SERVER FROM COMMAND LINE
.LP

To access your application server from command line (instead through web browser/web server), use this to see the application response:

.RS 4
.EX

\[char35]Add stock ticker 'XYZ' with stock price 450 
export CONTENT_TYPE=
export CONTENT_LENGTH=
export REQUEST_METHOD=GET
export SCRIPT_NAME='/stock'
export PATH_INFO='/add-stock'
export QUERY_STRING='name=XYZ&price=450'
cgi-fcgi -connect /var/lib/vv/stock/sock/sock /

\[char35]Display list of stock tickers 
export CONTENT_TYPE=
export CONTENT_LENGTH=
export REQUEST_METHOD=GET
export SCRIPT_NAME='/stock'
export PATH_INFO='/show-stock'
export QUERY_STRING=''
cgi-fcgi -connect /var/lib/vv/stock/sock/sock /

.EE
.RE

Note: to suppress output of HTTP headers, add this before running the above:

.RS 4
.EX

export VV_SILENT_HEADER=yes

.EE
.RE

If you need to, you can also run your application as a \fBCGI\fP program. 

.LP
.B RUN PROGRAM FROM COMMAND LINE
.LP

Execute the following to run your application from command line (as a command-line utility):

.RS 4
.EX

\[char35]Add stock ticker 'XYZ' with stock price 450 
vv -r --app='/stock' --req='/add-stock?name=XYZ&price=450' --method=GET --exec

\[char35]Display list of stock tickers 
vv -r --app='/stock' --req='/show-stock?' --method=GET --exec

.EE
.RE

You can also omit "--exec" option to output the bash code that's executed. Note: to suppress output of HTTP headers, add this before running the above:

.RS 4
.EX

export VV_SILENT_HEADER=yes

.EE
.RE

Note: if running your program as a command-line utility is all you want, you don't need to run an application server.

.LP
.B SOURCE FILES
.LP

The following are the source files in this application:

.B - Database objects (setup.sql)

Table "stock" with stock name and price is created for this example:

.RS 4
.EX

create table if not exists stock (stock_name varchar(100) primary key, stock_price bigint);

.EE
.RE


.B - Add stock ticker (add_stock.vely)

This requests (/add-stock) saves the names of stock tickers and their prices. It will obtain the stock name and price from the web client via \fBinput-param\fP statement, and then use INSERT SQL to store this data in the database. Note the use of "%%", the short version of \fBrequest-handler\fP and end-request-handler statements.

.RS 4
.EX


\[char35]include "vely.h"

%% /add-stock
    out-header default
    @<html>
        @<body>
        input-param name
        input-param price
        // Add data to stock table, update if the stock exists
        run-query @db_stock = "insert into stock (stock_name, stock_price) values ('%s', '%s') on duplicate key update stock_price='%s'" : name, price, price error define err no-loop
        if (strcmp (err, "0")) {
            report-error "Cannot update stock price, error [%s]", err
        }
        @<div>
            @Stock price updated!
        @</div>
        @</body>
    @</html>
%%


.EE
.RE


.B - Show stock tickers (show_stock.vely)

You can view stock tickers in a list. SELECT SQL is used to get all the stocks saved so far, and display them in a table using \fBrun-query\fP and then \fBquery-result\fP to get the query results.

.RS 4
.EX


\[char35]include "vely.h"

%% /show-stock
    out-header default
    @<html>
        @<body>
        // Show stock names and values
            @<table>
                @<tr>
                    @<td>Stock name</td>
                    @<td>Stock price</td>
                @</tr>
                run-query @db_stock = "select stock_name, stock_price from stock" output stock_name, stock_price
                    @<tr>
                        @<td>
                        query-result  stock_name
                        @</td>
                        @<td>
                        query-result  stock_price
                        @</td>
                    @</tr>
                end-query
            @</table>
        @</body>
    @</html>
%%


.EE
.RE

.SH SEE ALSO
 
.B - Examples

\fBexample_client_API\fP  
\fBexample_cookies\fP  
\fBexample_create_table\fP  
\fBexample_distributed_servers\fP  
\fBexample_docker\fP  
\fBexample_encryption\fP  
\fBexample_file_manager\fP  
\fBexample_form\fP  
\fBexample_hash_server\fP  
\fBexample_hello_world\fP  
\fBexample_how_to_design_application\fP  
\fBexample_json\fP  
\fBexample_multitenant_SaaS\fP  
\fBexample_postgres_transactions\fP  
\fBexamples\fP  
\fBexample_sendmail\fP  
\fBexample_shopping\fP  
\fBexample_stock\fP  
\fBexample_uploading_files\fP  
\fBexample_using_mariadb_mysql\fP  
\fBexample_utility\fP  
\fBexample_write_report\fP    
See all 
\fBdocumentation\fP
