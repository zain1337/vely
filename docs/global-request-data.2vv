.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
global-request-data \- Vely documentation (requests)
.SH DESCRIPTION
The purpose of global-request data is to facilitate using global variable(s) within a single \fBrequest\fP anywhere in your code. This is different from \fBglobal-process-data\fP which is used across many requests.

You can of course create global variables in C (and use C's "extern" to make them available anywhere). Vely's global-request data is an easier and more structured way to share data globally within a single request, without having to actually define and maintain global variables. It also makes it more maintainable because the usage of shared global information is well-encapsulated and easy to track (for instance in code reviews).

.LP
.B WHAT IS GLOBAL-REQUEST DATA
.LP

Global-request data is a generic pointer (void*) that points to any memory you wish to be shared among all your code within a single request. This memory is usually a structure containing information globally pertinent to your application. The pointer's scope is a single \fBrequest\fP, and it is initialized to NULL before each request. It is stored in Vely's internal request structure so it can be used anywhere.

.LP
.B SETTING
.LP


.RS 4
.EX

set-req data <data>

.EE
.RE

where <data> is a pointer to any memory you wish to use anywhere in your code.

.LP
.B GETTING
.LP

Global-request data can be obtained anywhere in your code with:

.RS 4
.EX

get-req data to <data>

.EE
.RE

where <data> is a pointer to any type.

.LP
.B USAGE
.LP

Typically you would define a structure or a typedef that encapsulates any data that needs to be shared throughout your code during a single request processing.

Then in \fBbefore-request-handler\fP, you would create the variable (or an array) of this type by using \fBnew-mem\fP - this way the memory is automatically released at the end of the request. Use \fBnew-mem\fP for any members that need allocating, thus eliminating the possibility of memory leaks. Initialize anything that needs it.

Next, save the pointer to the variable (or an array) you created by using \fBset-req\fP. 

Finally, anywhere you need to set or get any data, use \fBget-req\fP to get the pointer and manipulate or read your global-request data.

.SH EXAMPLES
Suppose your application has an include file my.h in which you define type "reqdata":

.RS 4
.EX

\[char35]ifndef _MY
\[char35]define _MY

typedef struct s_reqdata {
    bool some_flag;
    bool another_flag;
    char *ptr;
} reqdata;

\[char35]endif

.EE
.RE

Your \fBbefore-request-handler\fP might look like this - note that my.h is included, providing your type definition "reqdata":

.RS 4
.EX

\[char35]include "vely.h"
\[char35]include "my.h"

void _before () {
    reqdata *rd; // A pointer to global-request data

    // Allocate global-request data
    new-mem rd size sizeof(reqdata)

    // Initialize values in it
    rd->some_flag = false;
    rd->another_flag = false;

    // Save the pointer so you can use it anywhere with get-req
    set-req data rd
}

.EE
.RE

In the above code, a new pointer "rd" to type "reqdata" is created with \fBnew-mem\fP. Data initialization takes place - anything that needs initialization should be initialized. Finally, pointer "rd" is saved to request's internal structure with \fBset-req\fP, so it can be used anywhere during request processing.

In your code, wherever it's needed, you can obtain this data into a local pointer of the same type "reqdata" (in this case pointer name is "mydata"). You can do that with \fBget-req\fP and then examine or set any global variable you wish:

.RS 4
.EX

\[char35]include "vely.h"
\[char35]include "my.h"

void mycode () {
    
    ...
    reqdata *mydata; // declare local pointer 

    // get the actual value of a pointer, so now it points to global-request data
    get-req data to mydata
    
    // do whatever you want with the data: examine, set etc.
    if (mydata->another_flag) {
        mydata->some_flag = true;
        my_data->ptr = "some data";
    }
}


.EE
.RE

.SH SEE ALSO
 
.B - Requests

\fBafter-request-handler\fP  
\fBbefore-request-handler\fP  
\fBbuilding-URL\fP  
\fBend-request-handler\fP  
\fBgetting-URL\fP  
\fBglobal-request-data\fP  
\fBnon-request\fP  
\fBnormalized-URL\fP  
\fBrequest\fP  
\fBrequest-handler\fP  
\fBrequest-URL\fP  
\fBstartup-handler\fP  
\fBvely-dispatch-request\fP    
See all 
\fBdocumentation\fP
