.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
write-hash \-  (hash-table)
.SH PURPOSE
Store key/value pair into a hash table.

.SH SYNTAX

.RS 4
.EX

write-hash <hash> \\
    key <key> \\
    value <value> \\
    [ status [ define ] <status> ] \\
    [ old-value [ define ] <old value> ] 
    [ old-key [ define ] <old key> ] 
    [ process-key ]
    [ process-value ]

.EE
.RE

.SH DESCRIPTION
write-hash will store pointers <key> (in "key" clause) and <value> (specified in "value" clause) into hash table <hash>, which must be created with \fBnew-hash\fP. 

<key> is a string and <value> can be a pointer of any type, allowing storage of any kind of data; collectively they are called an "element". Memory pointed by <key> and <value> must not go out of scope or be freed while the hash is used - if necessary, store a copy (see \fBcopy-string\fP for strings); this is because write-hash does not make copies of <key> and <value>, rather only the pointers to those are stored in the hash.

If <key> already exists in the hash table, then the pointer to old value associated with it is returned in the optional <old value> (in "old-value" clause) and the pointer to old key is returned in the optional <old key> (in "old-key" clause) - in this case the optional number <status> (in "status" clause) has a value of VV_ERR_EXIST. 

If <key> did not exist, <status> will be VV_OKAY and <old value>/<old key> are NULL. Both <status> and <old value>/<old key> can be created with "define" clause.

Note that while <key> and <old key> will contain matching strings when <status> is VV_ERR_EXIST, the <old key> will contain a pointer to a key used in the previous write-string statement.

If a <hash> was created with "process-scope" clause (see \fBnew-hash\fP), then:

.RS 4
\[bu]    
if <key> and/or <value> are Vely \fBallocated memory\fP, then they will not be freed when the current request ends, rather they will persist while the process runs, unless they are deleted (see \fBdelete-mem\fP),

.RE

.RS 4
\[bu]    
if <key> and/or <value> are otherwise global variables (see \fBnew-hash\fP), then you must use "process-key" clause to specify that <key> is a global variable, and "process-value" to specify that <value> is a global variable. If you do not, it will be assumed that <key> and/or <value> are allocated by Vely and your program will likely \fBerror out\fP.
.RE

If a <hash> was not created with "process-scope", then "process-key" and "process-data" have no effect.

.SH EXAMPLES
Writing data to hash:

.RS 4
.EX

new-hash define h size 1000
write-hash h key "mykey" value "some data"

.EE
.RE

Writing new value with the same key and obtaining the previous value (which is "some data"):

.RS 4
.EX

write-hash h key "mykey" value "new data" status define st old-value define od
if (st == VV_ERR_EXIST) {
    @Previous value for this key is <<p-out od>>
}

.EE
.RE

The following is a hash key/value server, where a process-scoped hash is created. It provides inserting, deleting and querying key/value pairs. Such a server process can run indefinitely and provide a key service:

.RS 4
.EX

%% /hashsrv
    out-header default

    do-once 
    new-hash define h size 1024 process-scope
    end-do-once

    // Get input parameters
    task-param op
    input-param key
    input-param data

    if-task "add" // Add data to hash, make a copy as input params are request-scoped
        copy-string key to define c_key
        copy-string data to define c_data
        write-hash h key c_key value c_data old-value define old_data old-key define old_key status define st
        if (st == VV_ERR_EXIST) {
            delete-mem old_key
            delete-mem old_data
        }
        @Added [<<p-out key>>]
    else-task "delete" // Delete data and obtain the value deleted
        read-hash h key (key) value define val old-key define okey delete status define st
        if (st == VV_ERR_EXIST) {
            @Not found [<<p-out key>>]
        } else {
            // If found, then delete key and value
            @Deleted [<<p-out val>>]
            delete-mem val
            delete-mem okey
        }
    else-task "query" // Query hash based on key value
        read-hash h key (key) value define val status define st
        if (st == VV_ERR_EXIST) {
            @Not found, queried [<<p-out key>>]
        } else {
            @Value [<<p-out val>>]
        }
    end-task
%%

.EE
.RE

See \fBread-hash\fP for more examples.
.SH SEE ALSO
 
.B - Hash table

\fBget-hash\fP  
\fBnew-hash\fP  
\fBpurge-hash\fP  
\fBread-hash\fP  
\fBresize-hash\fP  
\fBwrite-hash\fP    
See all 
\fBdocumentation\fP
