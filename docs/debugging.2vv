.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
debugging \- Vely documentation (debugging)
.SH DESCRIPTION
Several techniques on debugging Vely applications are discussed here.

.LP
.B TRACING AND BACKTRACE FILE
.LP

To see any errors reported by Vely, use -e option of \fBvv\fP and check backtrace file. For example, to see the last 3 error messages:

.RS 4
.EX

vv -e 3

.EE
.RE

You can use \fBtrace-run\fP statement to create run-time traces (see \fBhow-vely-works\fP for directory location). To quickly find the location of recently written-to trace files, use -t option of \fBvv\fP, for example for 5 most recently used trace files:

.RS 4
.EX

vv -t 5

.EE
.RE

Use \fBget-req\fP to get the trace file location at run-time from your application.

.LP
.B OUTPUT FROM FASTCGI APPLICATION WITHOUT WEB SERVER
.LP

Use \fBFastCGI-command-line-client\fP to send request and receive reply from your \fBFastCGI\fP server processes from command line. This is useful in debugging issues and automating tests.

.LP
.B ISSUES IN STARTING VF
.LP

\fBvf\fP starts your web application, running as \fBFastCGI\fP processes. If you're having issues with vf, check out its log. Assuming your application name is "app_name", the log file is:

.RS 4
.EX

/var/lib/vv/app_name/vflog/log

.EE
.RE


.LP
.B WEB SERVER ERROR LOG
.LP

Check web server's error log, which would store the error messages emitted to the client. Typically, such files are in the following location:

.RS 4
.EX

/var/log/<web server>

.EE
.RE

(for example /var/log/apache2), but the location may vary - consult your web server's documentation.

.LP
.B USING GDB DEBUGGER
.LP

In order to use gdb debugger, you must make your application with "--debug" flag (see \fBvv\fP). Do not use "--debug" in any other case, because performance will be considerably affected.

Ultimately, you can attach a debugger to a running Vely process. If your application name is "app_name", first find the PID (process ID) of its process(es):

.RS 4
.EX

ps -ef|grep app_name.fcgi

.EE
.RE

Note that you can control the number of worker processes started, and thus have only a single worker process (or the minimum necessary), which will make attaching to the process that actually processes a request easier (see \fBvv\fP).

Use gdb to load your program:

.RS 4
.EX

sudo gdb /var/lib/vv/bld/app_name/app_name.fcgi

.EE
.RE

and then attach to the process (<PID> is the process ID you obtained above):

.RS 4
.EX

att <PID>

.EE
.RE

Once attached, you can break in the request you're debugging:

.RS 4
.EX

br <request name>

.EE
.RE

or in general Vely request dispatcher:

.RS 4
.EX

br vely_dispatch_request

.EE
.RE

which would handle any request to your application.

.LP
.B ERROR CONTAINING "VELY_STATEMENT_MUST_BE_WITHIN_CODE_BLOCK_HERE"
.LP

If you get an error like:

.RS 4
.EX

error: ‘_vely_statement_must_be_within_code_block_here_1’ undeclared (first use in this function);

.EE
.RE

then you are attempting to use a Vely statement in a single-statement implicit block, as in:

.RS 4
.EX

if (some condition) 
    exec-program ....

.EE
.RE

Since each Vely statement expands into one or more lines, if a Vely statement is the sole functional code used in an implicit code block, you must place it in an explicit block:

.RS 4
.EX

if (some condition)  {
    exec-program ....
}

.EE
.RE

See \fBexample-hello-world\fP for an example in debugging and tracing.
.SH SEE ALSO
 
.B - Debugging

\fBdebugging\fP  
\fBtrace-run\fP    
See all 
\fBdocumentation\fP
