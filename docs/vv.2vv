.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
vv \-  (general)
.SH PURPOSE
Builds Vely applications.

.SH SYNTAX

.RS 4
.EX

vv <options> 

.EE
.RE

.SH DESCRIPTION
vv is a \fBvely\fP tool for application building. 

.LP
.B COMMAND-LINE OPTIONS
.LP


.RS 4
\[bu]    
-q Build Vely application from source code in the current directory. \fBvf\fP must run first in this directory with "-i" option to create the application. The following options can be used when building:


.RS 4
\[bu]    
--db="[#]<database vendor>:<db config file> ..."
Specify a list of databases used in your application. Each element of the list is <database vendor> (which is 'mariadb', 'postgres' or 'sqlite'), followed by a colon (:) and then <db config file>, where <db config file> is used to refer to a database in \fBstatement_APIs\fP such as \fBrun-query\fP. 

Each <database vendor>:<db config file> is separated by a space. You can list any number of databases for use in your application. A file with name <db config file> must exist and contain the connection parameters for database access, and is copied once to Vely's database configuration directory (see \fBhow_vely_works\fP). 

If an optional "#" precedes <database vendor>, then database configuration file is overwritten even if already present. See \fBdatabase_config_file\fP for more details on the content of this file, the defaults used, and changing them to fit your needs.

.RE

.RS 4
\[bu]    
--lflag=<linker flags>
If you wish to add any additional linker flags (such as any non-Vely libraries), specify them quoted under this option. 

.RE

.RS 4
\[bu]    
--cflag=<C flags>
If you wish to add any additional C compiler (gcc) flags, specify them quoted under this option. 

.RE

.RS 4
\[bu]    
--trace
If specified, tracing information code will be generated (without it, tracing is not available and \fBtrace-run\fP statement is ignored). Tracing only works when debugging mode is enabled, so --debug option must be used as well.

.RE

.RS 4
\[bu]    
--path=<application path>
This option lets you specify the application path for your \fBrequest_URL\fPs. It is a leading path of a URL prior to request name and any parameters. If empty, the default is the application name preceded by a forward slash:

.RS 4
.EX

/<app name>

.EE
.RE

.RE

.RS 4
\[bu]    
--maxupload=<max upload size>
Specify maximum upload size for a file (in bytes). The default is approximately 25MB. 

.EE
.RE

.RE

.RS 4
\[bu]    
--max-errors=<max errors>
During building of an application, emit a maxium of <max errors> diagnostic messages. The default is 5.

.RE

.RS 4
\[bu]    
--debug
Generate debugging information when compiling your application. Debugging information is required to produce a backtrace file with the stack that contains source code line numbers, in order to pinpoint the exact location where report-error statement was used, or where the application crashed. It is also needed to use gdb for debugging purposes. 

.RE

.RS 4
\[bu]    
--c-lines
Skip generating line information when compiling .vely files. By default line information is included, which allows errors to be reported with line numbers in .vely files. If you want only generated C code line numbers to be used, use this option. This output will omit certain color-coded and other details that are normally present without this option.

.RE

.RS 4
\[bu]    
--posix-regex
Use ERE (Extended Regular Expression) POSIX regex library built into Linux instead of default PCRE2, see \fBmatch-regex\fP. While the two are largely compatibile, you can use either one depending on your needs.

.RE

.RS 4
\[bu]    
--plain-diag
Do not use color-coded and more detailed Vely diagnostic output. While rare, you may need this option in cases when there may be a Vely or underlying compiler bug, if you need to parse this output in format prior to Vely 17.1, or for some other reason.
.RE


.RE

.RS 4
\[bu]    
-i
Display both include and linking flags for an application that uses \fBFastCGI_API\fP to connect to Vely \fBFastCGI\fP server. The flags are for C compiler (gcc). If --include is used in addition, then only include flags are displayed. If --link is used in addition, then only linking flags are displayed. Use this to automate building of client applications with tools like Makefile.

.RE

.RS 4
\[bu]    
-v
Display Vely version as well as the Operating System version. 

.RE

.RS 4
\[bu]    
-s
Trace the execution of vv utility and display all the steps in making your application. 

.RE

.RS 4
\[bu]    
-e <num of errors>
Show the last <num of errors> from the backtrace file, which receives error message and stack trace when program crashes or \fBreport-error\fP is issued. Also display the path to backtrace file which contains the stack details.

.RE

.RS 4
\[bu]    
-t <num of trace files>
Show the last <num of trace files> most recent trace files for the application. This is useful when tracing (see \fBtrace-run\fP) to quickly find the trace files where Vely writes to. Also display the path to backtrace file which contains the stack details.

.RE

.RS 4
\[bu]    
-o
Show documentation directory - web page documentation is located here, and examples are located under "examples" subdirectory.

.RE

.RS 4
\[bu]    
-l
Show library directory - Vely's libraries and v1 code processor are located there.

.RE

.RS 4
\[bu]    
-a
Display CHANGELOG (i.e. release notes) for the current release.

.RE

.RS 4
\[bu]    
-r [ --req="/<request name><url payload>" ] [ --method="<request method>" ]
Display bash code to run a command-line program. You must be in the source code directory. You can use "--req" option to specify the request name and URL payload (see \fBrequest_URL\fP), for example it may be:

.RS 4
.EX

vv -r --req="/encrypt/data/somedata?method=aes256"

.EE
.RE

where "/encrypt" gives the request name, and "/data/somedata?method=aes256" represents the URL payload. Or it could be for instance:

.RS 4
.EX

vv -r --req="/encrypt?data=somedata&method=aes256"

.EE
.RE

where "/encrypt" gives the request name, and "?data=somedata&method=aes256" represents the URL payload. 

Use --method to specify the HTTP request method, for instance:

.RS 4
.EX

vv -r --req="/encrypt/data/somedata?method=aes256" --method=POST

.EE
.RE

If not specified, the default method is "GET". Either way, the output may look like:

.RS 4
.EX

export REQUEST_METHOD=POST
export SCRIPT_NAME="/enc"
export PATH_INFO="/encrypt/data/somedata"
export QUERY_STRING="method=aes256"
/var/lib/vv/bld/enc/enc

.EE
.RE

Running the above executes the command line program which handles the request specified. Note that SCRIPT_NAME will be set to whatever application path you use (i.e. the default or if set with "--path" option when making the application), see \fBrequest_URL\fP.

.RE

.RS 4
\[bu]    
-u 
Read stdin (standard input) and substitute any environment variables in the form of ${<var name>} with their values, and output to stdout (stdout). This is useful in processing configuration files that do not have parameter values hardcoded, but rather take them from the environment.

.RE

.RS 4
\[bu]    
-m
Add Vely syntax and keyword highlighting rules for files with .vely extension to Vim editor for the currently logged on user. Note that you must have Vim installed; vi alone will not work.

.RE

.RS 4
\[bu]    
-c,--clean 
Clean all object and other intermediate files, so that consequent project build is a full recompilation. Use it prior to rebuilding the application.

.RE

.RS 4
\[bu]    
-h
Display help.

.RE


.LP
.B EXAMPLES
.LP


.RS 4
\[bu]    
Make application (-q), use three databases (--db) named mdb (MariaDB database), pdb (PostgreSQL) and sdb (SQLite), produce debugging information (--debug), produce tracing information (--trace), specify that your application is using crypto and curl libraries:

.RS 4
.EX

vv -q --db="mariadb:mdb postgres:pdb sqlite:sdb" --debug --trace 

.EE
.RE


.RE

.RS 4
\[bu]    
make application, use MariaDB database db (--db), specify linker and C compilation flags, specify maximum upload size of about 18M:

.RS 4
.EX

vv -q --db="mariadb:db" --lflag "-Wl,-z,defs" --cflag "-DXYZ123" --maxupload 18000000

.EE
.RE


.RE

.RS 4
\[bu]    
Make application that doesn't use any databases:

.RS 4
.EX

vv -q

.EE
.RE

.RE

.SH SEE ALSO
 
.B - General

\fBapplication_architecture\fP  
\fBdeploying_application\fP  
\fBhow_vely_works\fP  
\fBquality_control\fP  
\fBrename_files\fP  
\fBSELinux\fP  
\fBvely\fP  
\fBvely_architecture\fP  
\fBvely_removal\fP  
\fBvf\fP  
\fBvv\fP    
See all 
\fBdocumentation\fP
