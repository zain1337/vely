.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
vely_dispatch_request \- Vely documentation (requests)
.SH DESCRIPTION
An incoming request is handled by a first available process:

.RS 4
\[bu]    
For a \fBcommand_line\fP application, there is only a single process, and it handles a single requests before it exits. 

.RE

.RS 4
\[bu]    
For server application (see \fBFastCGI\fP), there can be any number of processes running. A process is chosen to service a request if it is currently not serving other requests; this way there are no processes waiting idle unnecessarily.
.RE

Each process is identical and can serve any request, i.e. it has all request handlers available to it. Thus, when a process is chosen to serve a request, then this process will simply execute a function that handles a request. To do that, each process first calls "vely_dispatch_request()" function.

"void vely_dispatch_request()" is an automatically generated \fBrequest\fP-dispatching function in Vely. It uses request name (see \fBrequest_URL\fP) to call the appropriate request handler. 

For example, if the request name is "myreq", then function with signature "void myreq()" will be called - such function must be implemented in "myreq.vely" source code file.

You can implement two hooks into vely_dispatch_request(): one that executes before each request handling (\fBbefore_request_handler\fP) and one that executes afterwards (\fBafter_request_handler\fP).

In terms of debugging, breaking in this function gives you a good starting point to debug the handling of any given request, for instance in gdb:

.RS 4
.EX

br vely_dispatch_request

.EE
.RE

If no request has been recognized (i.e. request name does not match any request-handling .vely source file), then 

.RS 4
\[bu]    
no request handler will execute, 

.RE

.RS 4
\[bu]    
\fBbefore_request_handler\fP and \fBafter_request_handler\fP will not execute either,

.RE

.RS 4
\[bu]    
and a "Request not found" error will be reported via \fBreport-error\fP.
.RE

At the end of the request, all strings allocated by Vely will be freed.

You cannot change the implementation of vely_dispatch_request(), but you can see it in the build directory (see \fBvv\fP).
.SH SEE ALSO
 
.B - Requests

\fBafter_request_handler\fP  
\fBbefore_request_handler\fP  
\fBbuilding_URL\fP  
\fBgetting_URL\fP  
\fBglobal_request_data\fP  
\fBnon_request\fP  
\fBnormalized_URL\fP  
\fBrequest\fP  
\fBrequest_URL\fP  
\fBstartup_handler\fP  
\fBvely_dispatch_request\fP    
See all 
\fBdocumentation\fP
