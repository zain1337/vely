.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
open-file \-  (files)
.SH PURPOSE
Open file for reading and writing.

.SH SYNTAX

.RS 4
.EX

open-file <file> file-id [ define ] <file id> \\
    [ new-truncate ] \\
    [ status [ define ] <status> ]

.EE
.RE

.SH DESCRIPTION
Opens <file> for reading and writing and creates an open file variable identified by <file id>, which can be created with optional "define". If you supply your own <file id>, it should be of type "vely_file*".

<file> can be a full path name, or a path relative to the application home directory (see \fBhow-vely-works\fP).

You can obtain the status of file opening via optional <status> (in "status" clause), which can be created with optional "define". The <status> is VV_OKAY if file is opened, or VV_ERR_OPEN if could not open file.

If "new-truncate" clause is used, a new file is created if it doesn't exist, or it is truncated if it does.

.SH EXAMPLES

.RS 4
.EX

// Create new file, or truncate an old file if it exists
open-file "testwrite" file-id define nf new-truncate

// Write 25000 rows
num i;
for (i = 1; i <= 25000; i++) {
    (( define line
    some text in line <<p-out i>>
    )) bytes-written define line_len notrim
    write-file file-id nf from line length line_len 
}

// Rewind back to the beginning
file-position set 0 file-id nf

// Read all 25000 rows back, and print them out
for (i = 1; i <= 25000; i++) {
    read-file file-id nf  to define one_item 
    p-out one_item
}

// Close the file
close-file file-id nf


.EE
.RE

.SH SEE ALSO
 
.B - Files

\fBclose-file\fP  
\fBcopy-file\fP  
\fBdelete-file\fP  
\fBfile-position\fP  
\fBfile-storage\fP  
\fBfile-uploading\fP  
\fBlock-file\fP  
\fBopen-file\fP  
\fBread-file\fP  
\fBread-line\fP  
\fBrename-file\fP  
\fBstat-file\fP  
\fBtemporary-file\fP  
\fBuniq-file\fP  
\fBunlock-file\fP  
\fBwrite-file\fP    
See all 
\fBdocumentation\fP
