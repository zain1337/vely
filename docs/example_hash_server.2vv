.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
example_hash_server \- Vely documentation (examples)
.SH DESCRIPTION
You will create your own hash server in this example. A REST API will enable end-user to add key/data pairs, query and delete them. The data is in memory-only; a more involved example could be constructed to persist the data in some form. This is an extremely fast, single-process hash server.

In a nutshell:  web browser; Apache; REST API; Unix sockets; \fB3 source files, 54 lines of code\fP.

.LP
.B SETUP PREREQUISITES
.LP

\fBInstall Vely\fP - you can use standard packaging tools such as \fBapt\fP, \fBdnf\fP, \fBpacman\fP or \fBzypper\fP.

Because it is used in this example, you will need to install \fBApache\fP as a web server.

After installing Vely, turn on syntax highlighting in vim if you're using it:

.RS 4
.EX

vv -m

.EE
.RE


.LP
.B GET THE SOURCE CODE
.LP

The source code is a part of Vely installation. It is a good idea to create a separate source code directory for each application (and you can name it whatever you like). In this case, unpacking the source code will do that for you:

.RS 4
.EX

tar xvf $(vv -o)/examples/hash_server.tar.gz
cd hash_server

.EE
.RE

.LP
.B SETUP APPLICATION
.LP

The very first step is to create an application. The application will be named "hash_server", but you can name it anything (if you do that, change it everywhere). It's simple to do with \fBvf\fP:

.RS 4
.EX

sudo vf -i -u $(whoami) hash_server

.EE
.RE

This will create a new application home (which is "/var/lib/vv/hash_server") and do the application setup for you. Mostly that means create various subdirectories in the home folder, and assign them privileges. In this case only current user (or the result of "whoami" Linux command) will own those directories with 0700 privileges; it means a secure setup.

.LP
.B BUILD APPLICATION
.LP

Use \fBvv\fP utility to make the application:

.RS 4
.EX

vv -q 

.EE
.RE

.LP
.B START YOUR APPLICATION SERVER
.LP

To start the application server for your web application use \fBvf\fP FastCGI process manager. The application server will use a Unix socket to communicate with the web server (i.e. a reverse-proxy):

.RS 4
.EX

vf -w 1 hash_server

.EE
.RE

This will start 1 daemon process to serve the incoming requests. 

See \fBvf\fP for more options to help you achieve best performance.

If you want to stop your application server:

.RS 4
.EX

vf -m quit hash_server

.EE
.RE


.LP
.B SETUP WEB SERVER
.LP

This shows how to connect your application listening on a Unix socket (started with \fBvf\fP) to Apache web server.


.B - Step 1
:
To setup Apache as a reverse proxy and connect your application to it, you need to enable FastCGI proxy support, which generally means "proxy" and "proxy_fcgi" modules - this is done only once:

.RS 4
\[bu]    
For Debian (like Ubuntu) and OpenSUSE systems you need to enable proxy and proxy_fcgi modules:

.RS 4
.EX

sudo a2enmod proxy
sudo a2enmod proxy_fcgi

.EE
.RE

.RE


.RS 4
\[bu]    
For Fedora systems (or others like Archlinux) enable proxy and proxy_fcgi modules by adding (or uncommenting) LoadModule directives in the Apache configuration file - the default location of this file on Linux depends on the distribution. For Fedora (such as RedHat), Archlinux:

.RS 4
.EX

sudo vi /etc/httpd/conf/httpd.conf

.EE
.RE

For OpenSUSE:

.RS 4
.EX

sudo vi /etc/apache2/httpd.conf

.EE
.RE

Add this to the end of the file:

.RS 4
.EX

LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so

.EE
.RE

.RE


.B - Step 2
:
Edit the Apache configuration file:

.RS 4
\[bu]    
For Debian (such as Ubuntu):

.RS 4
.EX

sudo vi /etc/apache2/apache2.conf

.EE
.RE

.RE


.RS 4
\[bu]    
for Fedora (such as RedHat), Archlinux:

.RS 4
.EX

sudo vi /etc/httpd/conf/httpd.conf

.EE
.RE

.RE


.RS 4
\[bu]    
and for OpenSUSE:

.RS 4
.EX

sudo vi /etc/apache2/httpd.conf

.EE
.RE

.RE

Add this to the end of file ("/hash_server" is the application path (see \fBrequest_URL\fP) and "hash_server" is your application name):

.RS 4
.EX

ProxyPass "/hash_server" unix:///var/lib/vv/hash_server/sock/sock|fcgi://localhost/hash_server

.EE
.RE


.B - Step 3
:
Finally, restart Apache. On Debian systems (like Ubuntu) or OpenSUSE:

.RS 4
.EX

sudo systemctl restart apache2

.EE
.RE

On Fedora systems (like RedHat) and Arch Linux:

.RS 4
.EX

sudo systemctl restart httpd

.EE
.RE

Note: you must not have any other URL resource that starts with "/hash_server" (such as for example "/hash_server.html" or "/hash_server_something" etc.) as the web server will attempt to pass them as a reverse proxy request, and they will likely not work. If you need to, you can change the application path to be different from "/hash_server", see \fBrequest_URL\fP.


.LP
.B ACCESS APPLICATION SERVER FROM THE BROWSER
.LP

Use the following URL(s) to access your application server from a client like browser (see \fBrequest_URL\fP). Use actual IP or web address instead of 127.0.0.1 if different.

.RS 4
.EX

\[char35]Add key "key_1" with data "data_1" 
http://127.0.0.1/hash_server/server/op/add/key/key_1/data/data_1

\[char35]Query key "key_1" 
http://127.0.0.1/hash_server/server/op/query/key/key_1

\[char35]Delete key "key_1" 
http://127.0.0.1/hash_server/server/op/delete/key/key_1

.EE
.RE

Note: if your server is on the Internet and it has a firewall, you may need to allow HTTP traffic - see \fBufw\fP, \fBfirewall-cmd\fP etc.


.B - Test hash server with a bash script

To test the hash server, you can use "test_hash" bash script (see source code):

.RS 4
.EX

\[char46]/test_hash

.EE
.RE

This will insert 1000 key/data value pairs, query them, delete and then query again. The result is:

.RS 4
.EX

Keys added
Keys queried
Keys deleted
Keys queried
Hash server test successful

.EE
.RE



.B - Use REST API from command line

Here is the REST API for your application.

Substitute the loopback "localhost" with the IP or web address of your server.

Note that in these REST calls, the application path is "/hash_server", and the request name is "/server", followed by URL payload (see \fBrequest_URL\fP).

The request method used is based on REST methodology, i.e. POST to create resource, GET to obtain, DELETE to delete it, etc. This is how you can use the API:

.RS 4
\[bu]    
Here is an URL payload to add a key/data pair; use the "add" operation (i.e. "add" is the value for "op" parameter, written as path segment "/op/add"), and (as an example) specify "key_1" for a key (written as path segment "/key/key_1") and "data_1" for data (written as path segment "/data/data_1"). The entire URL is:

.RS 4
.EX

curl -X POST  "http://localhost/hash_server/server/op/add/key/key_1/data/data_1"

.EE
.RE

The result:

.RS 4
.EX

Added [key_1]

.EE
.RE


.RE

.RS 4
\[bu]    
To query the hash server, use the "query" operation (i.e. "query" is the value for "op" parameter, written as path segment "/op/query"), and (as an example) specify "key_1" for a key (written as path segment "/key/key_1"):

.RS 4
.EX

curl -X GET "http://localhost/hash_server/server/op/query/key/key_1"

.EE
.RE

The result:

.RS 4
.EX

Value [data_1]

.EE
.RE


.RE

.RS 4
\[bu]    
To delete a key/data pair, use the "delete" operation (i.e. "delete" is the value for "op" parameter, written as path segment "/op/delete"), and (as an example) specify "key_1" for a key (written as path segment "/key/key_1"):

.RS 4
.EX

curl -X DELETE "http://localhost/hash_server/server/op/delete/key/key_1"

.EE
.RE

The result:

.RS 4
.EX

Deleted [data_1]

.EE
.RE


.RE


.SH FILES
You are now done with the example! What follows are the source files in this project so you can examine how it works:

.LP
.B CREATE HASH SERVER (_STARTUP.VELY)
.LP

Hash itself (i.e. the fast-access structure used to store and search data based on a key) is created on process startup in a \fBstartup_handler\fP, which in this case allocates \fBnew-hash\fP using unmanaged memory (see \fBmemory_handling\fP). It means this hash will remain available across all the requests a process serves, which is exactly what a hash server needs.

.RS 4
.EX

\[char35]include "vely.h"

void _startup() {

    // Create memory available for the life of process
    manage-memory off
    new-hash define h size 1024
    manage-memory on

    // Register hash as process-wide data
    set-app process-data h   
    
}

.EE
.RE


.LP
.B HASH SERVER (SERVER.VELY)
.LP

This is the hash server. Because the data kept in hash needs to exist beyond a single request, we use unmanaged memory (see \fBmemory_handling\fP). This way hash data stays allocated and available for the life of the server process.

The first step is to obtain the \fBglobal_process_data\fP via \fBget-app\fP statement. This global process data is the pointer to the hash data, which has been set in \fBset-app\fP in the \fBstartup_handler\fP (_startup.vely).

Next, you get the input parameters  (see \fBinput-param\fP); in this case "op" (operation requested), "key" (value of a key) and "data" (value of data). Then, depending on the operation requested, the data is added, deleted and retrieved (i.e. queried). Note that because input parameter values are automatically freed when the request is finished, they are copied before being stored in the hash.

.RS 4
.EX

\[char35]include "vely.h"

void server() {
    out-header default

    // Unmanaged memory, i.e. not released at the end of the request
    manage-memory off

    // Get hash allocated in _startup.vely
    vely_hash *h;
    get-app process-data to h

    // Get input parameters
    task-param op
    input-param key
    input-param data

    if-task "add" // Add data to hash, make a copy as input params are request-scoped
        copy-string key to define c_key
        copy-string data to define c_data
        write-hash h key c_key value c_data
        @Added [<<p-out key>>]
    else-task "delete" // Delete data and obtain the value deleted
        read-hash h key (key) value define val old-key define okey delete status define st
        if (st == VV_ERR_EXIST) {
            @Not found [<<p-out key>>]
        } else {
            // If found, then delete key and value
            @Deleted [<<p-out val>>]
            delete-mem val
            delete-mem okey
        }
    else-task "query" // Query hash based on key value
        read-hash h key (key) value define val status define st
        if (st == VV_ERR_EXIST) {
            @Not found, queried [<<p-out key>>]
        } else {
            @Value [<<p-out val>>]
        }
    end-task
}

.EE
.RE


.LP
.B BASH TESTING SCRIPT (TEST_HASH)
.LP

Test hash server by adding 1000 key/data pairs, querying to make sure the data is correct, deleting all of them and then querying to make sure they were all deleted.

.RS 4
.EX

\[char35]Restart hash_server server for this test
vf -m restart hash_server

\[char35]Add 1000 key/data pairs. Key value is 0,1,2... and data values are "data_0", "data_1", "data_2" etc.
for i in {1..1000}; do
    if [ "$(curl -s "http://localhost/hash_server/server/op/add/key/$i/data/data_$i")" != "Added [$i]" ]; then
        echo "Error adding key [$i]"
        exit -1
    fi
done

echo "Keys added"

\[char35]Query all 1000 keys and check that values retrieved are the correct ones. 
for i in {1..1000}; do
    if [ "$(curl -s "http://localhost/hash_server/server/op/query/key/$i")" != "Value [data_$i]" ]; then
        echo "Error querying key [$i]"
        exit -1
    fi
done

echo "Keys queried"

\[char35]Delete all 1000 keys
ERR="0"
for i in {1..1000}; do
    if [ "$(curl -s "http://localhost/hash_server/server/op/delete/key/$i")" != "Deleted [data_$i]" ]; then
        echo "Error deleting key [$i]"
        exit -1
    fi
done

echo "Keys deleted"

\[char35]Query all 1000 keys and check that values retrieved are the correct ones. 
for i in {1..1000}; do
    if [ "$(curl -s "http://localhost/hash_server/server/op/query/key/$i")" != "Not found, queried [$i]" ]; then
        echo "Error querying key [$i] after deletion."
        exit -1
    fi
done

echo "Keys queried"

echo "Hash server test successful"




.EE
.RE

.SH SEE ALSO
 
.B - Examples

\fBexample_client_API\fP  
\fBexample_cookies\fP  
\fBexample_create_table\fP  
\fBexample_docker\fP  
\fBexample_encryption\fP  
\fBexample_file_manager\fP  
\fBexample_form\fP  
\fBexample_hash_server\fP  
\fBexample_hello_world\fP  
\fBexample_json\fP  
\fBexample_multitenant_SaaS\fP  
\fBexample_postgres_transactions\fP  
\fBexamples\fP  
\fBexample_sendmail\fP  
\fBexample_shopping\fP  
\fBexample_stock\fP  
\fBexample_utility\fP  
\fBexample_write_report\fP    
See all 
\fBdocumentation\fP
