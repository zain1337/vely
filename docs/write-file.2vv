.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
write-file \-  (files)
.SH PURPOSE
Write to a file.

.SH SYNTAX

.RS 4
.EX

write-file <file> | ( file-id <file id> ) \\
    from <content> \\
    [ length <length> ] \\
    [ ( position <position> ) | ( append [ <append> ] ) ] \\
    [ status [ define ] <status> ]

.EE
.RE

.SH DESCRIPTION

.LP
.B WITHOUT FILE-ID
.LP

This is a simple method of writing a file. File named <file> is opened, data written, and file is closed. 

write-file writes <content> to <file>, which is either a full path of the file or a path relative to the application home directory (see \fBhow-vely-works\fP).

If "append" clause is used without optional boolean expression <append>, or if <append> evaluates to true, the <content> is appended to the file; otherwise the file is overwritten with <content>, unless "position" clause is used in which case file is not overwritten and <content> is written at byte <position>. Note that <position> can be beyond the end of file, and null-bytes are written between the current end of file and <position>.

File is created if it does not exist (even if "append" is used), unless "position" clause is used in which case file must exist. 

If "length" is not used, then a string is written to a file, and the number of bytes written is the length of that string. If "length" is specified, then exactly <length> bytes is written and <content> can hold a binary value or a string.

If "status" clause is used, then the number of bytes written is stored to <status>, unless error occurred, in which case <status> has the error code. The error code can be VV_ERR_POSITION (if <position> is negative or file does not support it), VV_ERR_WRITE (if there is an error writing file) or VV_ERR_OPEN if file is not open. Note that no partial data will be written; if all of data cannot be written to the file, then none will be written, and in that case an error of VV_ERR_WRITE will be reported in <status>.


.LP
.B WITH FILE-ID
.LP

This method uses a <file id> that was created with \fBopen-file\fP. You can then write (and read) file using this <file id> and the file stays open until \fBclose-file\fP is called. 

If "position" clause is used, then data is written starting from byte <position>, otherwise writing starts from the current file position determined by the previous reads/writes or as set by using "set" clause in \fBfile-position\fP. After each read or write, the file position is advanced by the number of bytes read or written. Position can be set passed the last byte of the file, in which case writing will fill the space between the current end of file and the current position with null-bytes.

If "length" is not used, then a string is written to a file, and the number of bytes written is the length of that string. If "length" is specified, then exactly <length> bytes is written and <content> can hold a binary value or a string.

If "append" clause is used without optional boolean expression <append>, or if <append> evaluates to true, then file pointer is set at the end of file and data written.

If "status" clause is used, then the number of bytes written is stored to <status>, unless error occurred, in which case <status> has the error code. The error code can be VV_ERR_POSITION (if <position> is negative or file does not support it), VV_ERR_WRITE (if there is an error writing file) or VV_ERR_OPEN if file is not open. Note that no partial data will be written; if all of data cannot be written to the file, then none will be written, and in that case an error of VV_ERR_WRITE will be reported in <status>.

.SH EXAMPLES
To overwrite file "/path/to/file" with "Hello World":

.RS 4
.EX

write-file "/path/to/file" from "Hello World"

.EE
.RE

To append "Hello World" to file:

.RS 4
.EX

char *path="/path/to/file";
char *cont="Hello World";
write-file path from cont append

.EE
.RE

To write only 5 bytes (i.e. "Hello") and get status (if successful, number variable "st" would be "5"):

.RS 4
.EX

char *cont="Hello World";
write-file "file" from cont length 5 status define st

.EE
.RE

To write a string "Hello" at byte position 3 in the existing "file":

.RS 4
.EX

char *cont="Hello";
write-file "file" from cont position 3 status define st

.EE
.RE

See \fBopen-file\fP for an example with "file-id" clause.
.SH SEE ALSO
 
.B - Files

\fBclose-file\fP  
\fBcopy-file\fP  
\fBdelete-file\fP  
\fBfile-position\fP  
\fBfile-storage\fP  
\fBfile-uploading\fP  
\fBlock-file\fP  
\fBopen-file\fP  
\fBread-file\fP  
\fBread-line\fP  
\fBrename-file\fP  
\fBstat-file\fP  
\fBtemporary-file\fP  
\fBuniq-file\fP  
\fBunlock-file\fP  
\fBwrite-file\fP    
See all 
\fBdocumentation\fP
